
generated_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002324  10000000  10000000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10002324  10002324  00004324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  10002374  10002374  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ARM.extab    00000000  10002374  10002374  0000500c  2**0
                  CONTENTS
  5 .ARM          00000000  10002374  10002374  0000500c  2**0
                  CONTENTS
  6 .preinit_array 00000000  10002374  10002374  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  10002374  10002374  00004374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  10002378  10002378  00004378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000000c  10020000  1000237c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 00000000  1002000c  1002000c  0000500c  2**0
                  CONTENTS
 11 .bss          00000020  1002000c  10002388  0000500c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  1002002c  100023a8  0000500c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000aabc  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000011be  00000000  00000000  0000faf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000005f0  00000000  00000000  00010cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000045b  00000000  00000000  000112a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00044468  00000000  00000000  00011703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008617  00000000  00000000  00055b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001c1063  00000000  00000000  0005e182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0021f1e5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000015e4  00000000  00000000  0021f228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000075  00000000  00000000  0022080c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	@ (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	@ (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	@ (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	1002000c 	.word	0x1002000c
1000001c:	00000000 	.word	0x00000000
10000020:	1000230c 	.word	0x1000230c

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	@ (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	@ (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	@ (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020010 	.word	0x10020010
1000003c:	1000230c 	.word	0x1000230c

10000040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000040:	b480      	push	{r7}
10000042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000044:	4b0f      	ldr	r3, [pc, #60]	@ (10000084 <SystemInit+0x44>)
10000046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
1000004a:	4a0e      	ldr	r2, [pc, #56]	@ (10000084 <SystemInit+0x44>)
1000004c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
10000050:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000054:	4b0c      	ldr	r3, [pc, #48]	@ (10000088 <SystemInit+0x48>)
10000056:	2200      	movs	r2, #0
10000058:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000005a:	4b0b      	ldr	r3, [pc, #44]	@ (10000088 <SystemInit+0x48>)
1000005c:	2200      	movs	r2, #0
1000005e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000060:	4b09      	ldr	r3, [pc, #36]	@ (10000088 <SystemInit+0x48>)
10000062:	2200      	movs	r2, #0
10000064:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000066:	4b08      	ldr	r3, [pc, #32]	@ (10000088 <SystemInit+0x48>)
10000068:	2200      	movs	r2, #0
1000006a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000006c:	4b06      	ldr	r3, [pc, #24]	@ (10000088 <SystemInit+0x48>)
1000006e:	2200      	movs	r2, #0
10000070:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000072:	4b05      	ldr	r3, [pc, #20]	@ (10000088 <SystemInit+0x48>)
10000074:	2200      	movs	r2, #0
10000076:	625a      	str	r2, [r3, #36]	@ 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000078:	bf00      	nop
1000007a:	46bd      	mov	sp, r7
1000007c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000080:	4770      	bx	lr
10000082:	bf00      	nop
10000084:	e000ed00 	.word	0xe000ed00
10000088:	5000d0c0 	.word	0x5000d0c0

1000008c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
1000008c:	b580      	push	{r7, lr}
1000008e:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10000090:	2003      	movs	r0, #3
10000092:	f000 f91d 	bl	100002d0 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10000096:	f001 fada 	bl	1000164e <HAL_RCC_GetSystemCoreClockFreq>
1000009a:	4603      	mov	r3, r0
1000009c:	4a07      	ldr	r2, [pc, #28]	@ (100000bc <HAL_Init+0x30>)
1000009e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
100000a0:	2001      	movs	r0, #1
100000a2:	f000 f80d 	bl	100000c0 <HAL_InitTick>
100000a6:	4603      	mov	r3, r0
100000a8:	2b00      	cmp	r3, #0
100000aa:	d001      	beq.n	100000b0 <HAL_Init+0x24>
  {
    return HAL_ERROR;
100000ac:	2301      	movs	r3, #1
100000ae:	e002      	b.n	100000b6 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
100000b0:	f002 f8a1 	bl	100021f6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
100000b4:	2300      	movs	r3, #0
}
100000b6:	4618      	mov	r0, r3
100000b8:	bd80      	pop	{r7, pc}
100000ba:	bf00      	nop
100000bc:	10020000 	.word	0x10020000

100000c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100000c0:	b580      	push	{r7, lr}
100000c2:	b082      	sub	sp, #8
100000c4:	af00      	add	r7, sp, #0
100000c6:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
100000c8:	4b15      	ldr	r3, [pc, #84]	@ (10000120 <HAL_InitTick+0x60>)
100000ca:	781b      	ldrb	r3, [r3, #0]
100000cc:	2b00      	cmp	r3, #0
100000ce:	d101      	bne.n	100000d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
100000d0:	2301      	movs	r3, #1
100000d2:	e021      	b.n	10000118 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
100000d4:	4b13      	ldr	r3, [pc, #76]	@ (10000124 <HAL_InitTick+0x64>)
100000d6:	681a      	ldr	r2, [r3, #0]
100000d8:	4b11      	ldr	r3, [pc, #68]	@ (10000120 <HAL_InitTick+0x60>)
100000da:	781b      	ldrb	r3, [r3, #0]
100000dc:	4619      	mov	r1, r3
100000de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
100000e2:	fbb3 f3f1 	udiv	r3, r3, r1
100000e6:	fbb2 f3f3 	udiv	r3, r2, r3
100000ea:	4618      	mov	r0, r3
100000ec:	f000 f917 	bl	1000031e <HAL_SYSTICK_Config>
100000f0:	4603      	mov	r3, r0
100000f2:	2b00      	cmp	r3, #0
100000f4:	d001      	beq.n	100000fa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
100000f6:	2301      	movs	r3, #1
100000f8:	e00e      	b.n	10000118 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100000fa:	687b      	ldr	r3, [r7, #4]
100000fc:	2b0f      	cmp	r3, #15
100000fe:	d80a      	bhi.n	10000116 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10000100:	2200      	movs	r2, #0
10000102:	6879      	ldr	r1, [r7, #4]
10000104:	f04f 30ff 	mov.w	r0, #4294967295
10000108:	f000 f8ed 	bl	100002e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
1000010c:	4a06      	ldr	r2, [pc, #24]	@ (10000128 <HAL_InitTick+0x68>)
1000010e:	687b      	ldr	r3, [r7, #4]
10000110:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
10000112:	2300      	movs	r3, #0
10000114:	e000      	b.n	10000118 <HAL_InitTick+0x58>
    return HAL_ERROR;
10000116:	2301      	movs	r3, #1
}
10000118:	4618      	mov	r0, r3
1000011a:	3708      	adds	r7, #8
1000011c:	46bd      	mov	sp, r7
1000011e:	bd80      	pop	{r7, pc}
10000120:	10020008 	.word	0x10020008
10000124:	10020000 	.word	0x10020000
10000128:	10020004 	.word	0x10020004

1000012c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
1000012c:	b480      	push	{r7}
1000012e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10000130:	4b06      	ldr	r3, [pc, #24]	@ (1000014c <HAL_IncTick+0x20>)
10000132:	781b      	ldrb	r3, [r3, #0]
10000134:	461a      	mov	r2, r3
10000136:	4b06      	ldr	r3, [pc, #24]	@ (10000150 <HAL_IncTick+0x24>)
10000138:	681b      	ldr	r3, [r3, #0]
1000013a:	4413      	add	r3, r2
1000013c:	4a04      	ldr	r2, [pc, #16]	@ (10000150 <HAL_IncTick+0x24>)
1000013e:	6013      	str	r3, [r2, #0]
}
10000140:	bf00      	nop
10000142:	46bd      	mov	sp, r7
10000144:	f85d 7b04 	ldr.w	r7, [sp], #4
10000148:	4770      	bx	lr
1000014a:	bf00      	nop
1000014c:	10020008 	.word	0x10020008
10000150:	10020028 	.word	0x10020028

10000154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10000154:	b480      	push	{r7}
10000156:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10000158:	4b03      	ldr	r3, [pc, #12]	@ (10000168 <HAL_GetTick+0x14>)
1000015a:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
1000015c:	4618      	mov	r0, r3
1000015e:	46bd      	mov	sp, r7
10000160:	f85d 7b04 	ldr.w	r7, [sp], #4
10000164:	4770      	bx	lr
10000166:	bf00      	nop
10000168:	10020028 	.word	0x10020028

1000016c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
1000016c:	b480      	push	{r7}
1000016e:	b085      	sub	sp, #20
10000170:	af00      	add	r7, sp, #0
10000172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10000174:	687b      	ldr	r3, [r7, #4]
10000176:	f003 0307 	and.w	r3, r3, #7
1000017a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
1000017c:	4b0c      	ldr	r3, [pc, #48]	@ (100001b0 <__NVIC_SetPriorityGrouping+0x44>)
1000017e:	68db      	ldr	r3, [r3, #12]
10000180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10000182:	68ba      	ldr	r2, [r7, #8]
10000184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
10000188:	4013      	ands	r3, r2
1000018a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
1000018c:	68fb      	ldr	r3, [r7, #12]
1000018e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10000190:	68bb      	ldr	r3, [r7, #8]
10000192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10000194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
10000198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
1000019c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
1000019e:	4a04      	ldr	r2, [pc, #16]	@ (100001b0 <__NVIC_SetPriorityGrouping+0x44>)
100001a0:	68bb      	ldr	r3, [r7, #8]
100001a2:	60d3      	str	r3, [r2, #12]
}
100001a4:	bf00      	nop
100001a6:	3714      	adds	r7, #20
100001a8:	46bd      	mov	sp, r7
100001aa:	f85d 7b04 	ldr.w	r7, [sp], #4
100001ae:	4770      	bx	lr
100001b0:	e000ed00 	.word	0xe000ed00

100001b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
100001b4:	b480      	push	{r7}
100001b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
100001b8:	4b04      	ldr	r3, [pc, #16]	@ (100001cc <__NVIC_GetPriorityGrouping+0x18>)
100001ba:	68db      	ldr	r3, [r3, #12]
100001bc:	0a1b      	lsrs	r3, r3, #8
100001be:	f003 0307 	and.w	r3, r3, #7
}
100001c2:	4618      	mov	r0, r3
100001c4:	46bd      	mov	sp, r7
100001c6:	f85d 7b04 	ldr.w	r7, [sp], #4
100001ca:	4770      	bx	lr
100001cc:	e000ed00 	.word	0xe000ed00

100001d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100001d0:	b480      	push	{r7}
100001d2:	b083      	sub	sp, #12
100001d4:	af00      	add	r7, sp, #0
100001d6:	4603      	mov	r3, r0
100001d8:	6039      	str	r1, [r7, #0]
100001da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100001dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100001e0:	2b00      	cmp	r3, #0
100001e2:	db0a      	blt.n	100001fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100001e4:	683b      	ldr	r3, [r7, #0]
100001e6:	b2da      	uxtb	r2, r3
100001e8:	490c      	ldr	r1, [pc, #48]	@ (1000021c <__NVIC_SetPriority+0x4c>)
100001ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100001ee:	0112      	lsls	r2, r2, #4
100001f0:	b2d2      	uxtb	r2, r2
100001f2:	440b      	add	r3, r1
100001f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
100001f8:	e00a      	b.n	10000210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100001fa:	683b      	ldr	r3, [r7, #0]
100001fc:	b2da      	uxtb	r2, r3
100001fe:	4908      	ldr	r1, [pc, #32]	@ (10000220 <__NVIC_SetPriority+0x50>)
10000200:	88fb      	ldrh	r3, [r7, #6]
10000202:	f003 030f 	and.w	r3, r3, #15
10000206:	3b04      	subs	r3, #4
10000208:	0112      	lsls	r2, r2, #4
1000020a:	b2d2      	uxtb	r2, r2
1000020c:	440b      	add	r3, r1
1000020e:	761a      	strb	r2, [r3, #24]
}
10000210:	bf00      	nop
10000212:	370c      	adds	r7, #12
10000214:	46bd      	mov	sp, r7
10000216:	f85d 7b04 	ldr.w	r7, [sp], #4
1000021a:	4770      	bx	lr
1000021c:	e000e100 	.word	0xe000e100
10000220:	e000ed00 	.word	0xe000ed00

10000224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000224:	b480      	push	{r7}
10000226:	b089      	sub	sp, #36	@ 0x24
10000228:	af00      	add	r7, sp, #0
1000022a:	60f8      	str	r0, [r7, #12]
1000022c:	60b9      	str	r1, [r7, #8]
1000022e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10000230:	68fb      	ldr	r3, [r7, #12]
10000232:	f003 0307 	and.w	r3, r3, #7
10000236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10000238:	69fb      	ldr	r3, [r7, #28]
1000023a:	f1c3 0307 	rsb	r3, r3, #7
1000023e:	2b04      	cmp	r3, #4
10000240:	bf28      	it	cs
10000242:	2304      	movcs	r3, #4
10000244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10000246:	69fb      	ldr	r3, [r7, #28]
10000248:	3304      	adds	r3, #4
1000024a:	2b06      	cmp	r3, #6
1000024c:	d902      	bls.n	10000254 <NVIC_EncodePriority+0x30>
1000024e:	69fb      	ldr	r3, [r7, #28]
10000250:	3b03      	subs	r3, #3
10000252:	e000      	b.n	10000256 <NVIC_EncodePriority+0x32>
10000254:	2300      	movs	r3, #0
10000256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000258:	f04f 32ff 	mov.w	r2, #4294967295
1000025c:	69bb      	ldr	r3, [r7, #24]
1000025e:	fa02 f303 	lsl.w	r3, r2, r3
10000262:	43da      	mvns	r2, r3
10000264:	68bb      	ldr	r3, [r7, #8]
10000266:	401a      	ands	r2, r3
10000268:	697b      	ldr	r3, [r7, #20]
1000026a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1000026c:	f04f 31ff 	mov.w	r1, #4294967295
10000270:	697b      	ldr	r3, [r7, #20]
10000272:	fa01 f303 	lsl.w	r3, r1, r3
10000276:	43d9      	mvns	r1, r3
10000278:	687b      	ldr	r3, [r7, #4]
1000027a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
1000027c:	4313      	orrs	r3, r2
         );
}
1000027e:	4618      	mov	r0, r3
10000280:	3724      	adds	r7, #36	@ 0x24
10000282:	46bd      	mov	sp, r7
10000284:	f85d 7b04 	ldr.w	r7, [sp], #4
10000288:	4770      	bx	lr
	...

1000028c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
1000028c:	b580      	push	{r7, lr}
1000028e:	b082      	sub	sp, #8
10000290:	af00      	add	r7, sp, #0
10000292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10000294:	687b      	ldr	r3, [r7, #4]
10000296:	3b01      	subs	r3, #1
10000298:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
1000029c:	d301      	bcc.n	100002a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
1000029e:	2301      	movs	r3, #1
100002a0:	e00f      	b.n	100002c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
100002a2:	4a0a      	ldr	r2, [pc, #40]	@ (100002cc <SysTick_Config+0x40>)
100002a4:	687b      	ldr	r3, [r7, #4]
100002a6:	3b01      	subs	r3, #1
100002a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
100002aa:	210f      	movs	r1, #15
100002ac:	f04f 30ff 	mov.w	r0, #4294967295
100002b0:	f7ff ff8e 	bl	100001d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
100002b4:	4b05      	ldr	r3, [pc, #20]	@ (100002cc <SysTick_Config+0x40>)
100002b6:	2200      	movs	r2, #0
100002b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
100002ba:	4b04      	ldr	r3, [pc, #16]	@ (100002cc <SysTick_Config+0x40>)
100002bc:	2207      	movs	r2, #7
100002be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
100002c0:	2300      	movs	r3, #0
}
100002c2:	4618      	mov	r0, r3
100002c4:	3708      	adds	r7, #8
100002c6:	46bd      	mov	sp, r7
100002c8:	bd80      	pop	{r7, pc}
100002ca:	bf00      	nop
100002cc:	e000e010 	.word	0xe000e010

100002d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
100002d0:	b580      	push	{r7, lr}
100002d2:	b082      	sub	sp, #8
100002d4:	af00      	add	r7, sp, #0
100002d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
100002d8:	6878      	ldr	r0, [r7, #4]
100002da:	f7ff ff47 	bl	1000016c <__NVIC_SetPriorityGrouping>
}
100002de:	bf00      	nop
100002e0:	3708      	adds	r7, #8
100002e2:	46bd      	mov	sp, r7
100002e4:	bd80      	pop	{r7, pc}

100002e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
100002e6:	b580      	push	{r7, lr}
100002e8:	b086      	sub	sp, #24
100002ea:	af00      	add	r7, sp, #0
100002ec:	4603      	mov	r3, r0
100002ee:	60b9      	str	r1, [r7, #8]
100002f0:	607a      	str	r2, [r7, #4]
100002f2:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
100002f4:	2300      	movs	r3, #0
100002f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
100002f8:	f7ff ff5c 	bl	100001b4 <__NVIC_GetPriorityGrouping>
100002fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
100002fe:	687a      	ldr	r2, [r7, #4]
10000300:	68b9      	ldr	r1, [r7, #8]
10000302:	6978      	ldr	r0, [r7, #20]
10000304:	f7ff ff8e 	bl	10000224 <NVIC_EncodePriority>
10000308:	4602      	mov	r2, r0
1000030a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
1000030e:	4611      	mov	r1, r2
10000310:	4618      	mov	r0, r3
10000312:	f7ff ff5d 	bl	100001d0 <__NVIC_SetPriority>
}
10000316:	bf00      	nop
10000318:	3718      	adds	r7, #24
1000031a:	46bd      	mov	sp, r7
1000031c:	bd80      	pop	{r7, pc}

1000031e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
1000031e:	b580      	push	{r7, lr}
10000320:	b082      	sub	sp, #8
10000322:	af00      	add	r7, sp, #0
10000324:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10000326:	6878      	ldr	r0, [r7, #4]
10000328:	f7ff ffb0 	bl	1000028c <SysTick_Config>
1000032c:	4603      	mov	r3, r0
}
1000032e:	4618      	mov	r0, r3
10000330:	3708      	adds	r7, #8
10000332:	46bd      	mov	sp, r7
10000334:	bd80      	pop	{r7, pc}
	...

10000338 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
10000338:	b480      	push	{r7}
1000033a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000033c:	4b05      	ldr	r3, [pc, #20]	@ (10000354 <HAL_PWR_EnableBkUpAccess+0x1c>)
1000033e:	681b      	ldr	r3, [r3, #0]
10000340:	4a04      	ldr	r2, [pc, #16]	@ (10000354 <HAL_PWR_EnableBkUpAccess+0x1c>)
10000342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10000346:	6013      	str	r3, [r2, #0]
}
10000348:	bf00      	nop
1000034a:	46bd      	mov	sp, r7
1000034c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000350:	4770      	bx	lr
10000352:	bf00      	nop
10000354:	50001000 	.word	0x50001000

10000358 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10000358:	b580      	push	{r7, lr}
1000035a:	b084      	sub	sp, #16
1000035c:	af00      	add	r7, sp, #0
1000035e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10000360:	2300      	movs	r3, #0
10000362:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10000364:	687b      	ldr	r3, [r7, #4]
10000366:	2b00      	cmp	r3, #0
10000368:	d101      	bne.n	1000036e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
1000036a:	2301      	movs	r3, #1
1000036c:	e320      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
1000036e:	687b      	ldr	r3, [r7, #4]
10000370:	681b      	ldr	r3, [r3, #0]
10000372:	f003 0301 	and.w	r3, r3, #1
10000376:	2b00      	cmp	r3, #0
10000378:	f000 8081 	beq.w	1000047e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
1000037c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000380:	6a1b      	ldr	r3, [r3, #32]
10000382:	f003 0303 	and.w	r3, r3, #3
10000386:	2b01      	cmp	r3, #1
10000388:	d107      	bne.n	1000039a <HAL_RCC_OscConfig+0x42>
1000038a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000038e:	6a1b      	ldr	r3, [r3, #32]
10000390:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000394:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000398:	d054      	beq.n	10000444 <HAL_RCC_OscConfig+0xec>
1000039a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000039e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100003a0:	f003 0307 	and.w	r3, r3, #7
100003a4:	2b01      	cmp	r3, #1
100003a6:	d107      	bne.n	100003b8 <HAL_RCC_OscConfig+0x60>
100003a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100003ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100003ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100003b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100003b6:	d045      	beq.n	10000444 <HAL_RCC_OscConfig+0xec>
100003b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100003bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100003be:	f003 0303 	and.w	r3, r3, #3
100003c2:	2b01      	cmp	r3, #1
100003c4:	d107      	bne.n	100003d6 <HAL_RCC_OscConfig+0x7e>
100003c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100003ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100003cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100003d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100003d4:	d036      	beq.n	10000444 <HAL_RCC_OscConfig+0xec>
100003d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100003da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100003dc:	f003 0303 	and.w	r3, r3, #3
100003e0:	2b01      	cmp	r3, #1
100003e2:	d10f      	bne.n	10000404 <HAL_RCC_OscConfig+0xac>
100003e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100003e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100003ec:	f003 0302 	and.w	r3, r3, #2
100003f0:	2b02      	cmp	r3, #2
100003f2:	d027      	beq.n	10000444 <HAL_RCC_OscConfig+0xec>
100003f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100003f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100003fc:	f003 0302 	and.w	r3, r3, #2
10000400:	2b02      	cmp	r3, #2
10000402:	d01f      	beq.n	10000444 <HAL_RCC_OscConfig+0xec>
10000404:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000408:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
1000040c:	f003 0303 	and.w	r3, r3, #3
10000410:	2b01      	cmp	r3, #1
10000412:	d107      	bne.n	10000424 <HAL_RCC_OscConfig+0xcc>
10000414:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000418:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000041c:	f003 0302 	and.w	r3, r3, #2
10000420:	2b02      	cmp	r3, #2
10000422:	d00f      	beq.n	10000444 <HAL_RCC_OscConfig+0xec>
10000424:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000428:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
1000042c:	f003 0303 	and.w	r3, r3, #3
10000430:	2b01      	cmp	r3, #1
10000432:	d117      	bne.n	10000464 <HAL_RCC_OscConfig+0x10c>
10000434:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000438:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000043c:	f003 0302 	and.w	r3, r3, #2
10000440:	2b02      	cmp	r3, #2
10000442:	d10f      	bne.n	10000464 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000444:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000448:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000044c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10000450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10000454:	d112      	bne.n	1000047c <HAL_RCC_OscConfig+0x124>
10000456:	687b      	ldr	r3, [r7, #4]
10000458:	685b      	ldr	r3, [r3, #4]
1000045a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1000045e:	d00d      	beq.n	1000047c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10000460:	2301      	movs	r3, #1
10000462:	e2a5      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10000464:	687b      	ldr	r3, [r7, #4]
10000466:	685b      	ldr	r3, [r3, #4]
10000468:	4618      	mov	r0, r3
1000046a:	f000 faa7 	bl	100009bc <HAL_RCC_HSEConfig>
1000046e:	4603      	mov	r3, r0
10000470:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10000472:	7bfb      	ldrb	r3, [r7, #15]
10000474:	2b00      	cmp	r3, #0
10000476:	d002      	beq.n	1000047e <HAL_RCC_OscConfig+0x126>
      {
        return result;
10000478:	7bfb      	ldrb	r3, [r7, #15]
1000047a:	e299      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
1000047c:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
1000047e:	687b      	ldr	r3, [r7, #4]
10000480:	681b      	ldr	r3, [r3, #0]
10000482:	f003 0302 	and.w	r3, r3, #2
10000486:	2b00      	cmp	r3, #0
10000488:	f000 814e 	beq.w	10000728 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
1000048c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000490:	6a1b      	ldr	r3, [r3, #32]
10000492:	f003 0303 	and.w	r3, r3, #3
10000496:	2b00      	cmp	r3, #0
10000498:	d107      	bne.n	100004aa <HAL_RCC_OscConfig+0x152>
1000049a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000049e:	6a1b      	ldr	r3, [r3, #32]
100004a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100004a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100004a8:	d055      	beq.n	10000556 <HAL_RCC_OscConfig+0x1fe>
100004aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100004ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100004b0:	f003 0307 	and.w	r3, r3, #7
100004b4:	2b00      	cmp	r3, #0
100004b6:	d107      	bne.n	100004c8 <HAL_RCC_OscConfig+0x170>
100004b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100004bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100004be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100004c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100004c6:	d046      	beq.n	10000556 <HAL_RCC_OscConfig+0x1fe>
100004c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100004cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100004ce:	f003 0303 	and.w	r3, r3, #3
100004d2:	2b00      	cmp	r3, #0
100004d4:	d107      	bne.n	100004e6 <HAL_RCC_OscConfig+0x18e>
100004d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100004da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100004dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100004e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100004e4:	d037      	beq.n	10000556 <HAL_RCC_OscConfig+0x1fe>
100004e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100004ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100004ec:	f003 0303 	and.w	r3, r3, #3
100004f0:	2b00      	cmp	r3, #0
100004f2:	d10f      	bne.n	10000514 <HAL_RCC_OscConfig+0x1bc>
100004f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100004f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100004fc:	f003 0302 	and.w	r3, r3, #2
10000500:	2b02      	cmp	r3, #2
10000502:	d028      	beq.n	10000556 <HAL_RCC_OscConfig+0x1fe>
10000504:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000508:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000050c:	f003 0302 	and.w	r3, r3, #2
10000510:	2b02      	cmp	r3, #2
10000512:	d020      	beq.n	10000556 <HAL_RCC_OscConfig+0x1fe>
10000514:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000518:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
1000051c:	f003 0303 	and.w	r3, r3, #3
10000520:	2b00      	cmp	r3, #0
10000522:	d107      	bne.n	10000534 <HAL_RCC_OscConfig+0x1dc>
10000524:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000528:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000052c:	f003 0302 	and.w	r3, r3, #2
10000530:	2b02      	cmp	r3, #2
10000532:	d010      	beq.n	10000556 <HAL_RCC_OscConfig+0x1fe>
10000534:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000538:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
1000053c:	f003 0303 	and.w	r3, r3, #3
10000540:	2b00      	cmp	r3, #0
10000542:	f040 8088 	bne.w	10000656 <HAL_RCC_OscConfig+0x2fe>
10000546:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000054a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000054e:	f003 0302 	and.w	r3, r3, #2
10000552:	2b02      	cmp	r3, #2
10000554:	d17f      	bne.n	10000656 <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000556:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000055a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000055e:	f003 0301 	and.w	r3, r3, #1
10000562:	2b01      	cmp	r3, #1
10000564:	d105      	bne.n	10000572 <HAL_RCC_OscConfig+0x21a>
10000566:	687b      	ldr	r3, [r7, #4]
10000568:	68db      	ldr	r3, [r3, #12]
1000056a:	2b01      	cmp	r3, #1
1000056c:	d001      	beq.n	10000572 <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
1000056e:	2301      	movs	r3, #1
10000570:	e21e      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000572:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000576:	699b      	ldr	r3, [r3, #24]
10000578:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
1000057c:	687b      	ldr	r3, [r7, #4]
1000057e:	691b      	ldr	r3, [r3, #16]
10000580:	021b      	lsls	r3, r3, #8
10000582:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000586:	4313      	orrs	r3, r2
10000588:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
1000058a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000058e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10000590:	f003 0303 	and.w	r3, r3, #3
10000594:	2b00      	cmp	r3, #0
10000596:	d10f      	bne.n	100005b8 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000598:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000059c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100005a0:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
100005a4:	2b02      	cmp	r3, #2
100005a6:	d047      	beq.n	10000638 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
100005a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100005ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100005b0:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
100005b4:	2b02      	cmp	r3, #2
100005b6:	d03f      	beq.n	10000638 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
100005b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100005bc:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100005c0:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
100005c4:	2b00      	cmp	r3, #0
100005c6:	d107      	bne.n	100005d8 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
100005c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100005cc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100005d0:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
100005d4:	2b02      	cmp	r3, #2
100005d6:	d02f      	beq.n	10000638 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
100005d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100005dc:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100005e0:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
100005e4:	2b00      	cmp	r3, #0
100005e6:	d107      	bne.n	100005f8 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
100005e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100005ec:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100005f0:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
100005f4:	2b02      	cmp	r3, #2
100005f6:	d01f      	beq.n	10000638 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
100005f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100005fc:	699b      	ldr	r3, [r3, #24]
100005fe:	f023 0203 	bic.w	r2, r3, #3
10000602:	687b      	ldr	r3, [r7, #4]
10000604:	695b      	ldr	r3, [r3, #20]
10000606:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000060a:	4313      	orrs	r3, r2
1000060c:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
1000060e:	f7ff fda1 	bl	10000154 <HAL_GetTick>
10000612:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000614:	e008      	b.n	10000628 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000616:	f7ff fd9d 	bl	10000154 <HAL_GetTick>
1000061a:	4602      	mov	r2, r0
1000061c:	68bb      	ldr	r3, [r7, #8]
1000061e:	1ad3      	subs	r3, r2, r3
10000620:	2b64      	cmp	r3, #100	@ 0x64
10000622:	d901      	bls.n	10000628 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10000624:	2303      	movs	r3, #3
10000626:	e1c3      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000628:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000062c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000630:	f003 0304 	and.w	r3, r3, #4
10000634:	2b04      	cmp	r3, #4
10000636:	d1ee      	bne.n	10000616 <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10000638:	f001 f809 	bl	1000164e <HAL_RCC_GetSystemCoreClockFreq>
1000063c:	4603      	mov	r3, r0
1000063e:	4ab3      	ldr	r2, [pc, #716]	@ (1000090c <HAL_RCC_OscConfig+0x5b4>)
10000640:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10000642:	4bb3      	ldr	r3, [pc, #716]	@ (10000910 <HAL_RCC_OscConfig+0x5b8>)
10000644:	681b      	ldr	r3, [r3, #0]
10000646:	4618      	mov	r0, r3
10000648:	f7ff fd3a 	bl	100000c0 <HAL_InitTick>
1000064c:	4603      	mov	r3, r0
1000064e:	2b00      	cmp	r3, #0
10000650:	d069      	beq.n	10000726 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10000652:	2301      	movs	r3, #1
10000654:	e1ac      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10000656:	687b      	ldr	r3, [r7, #4]
10000658:	68db      	ldr	r3, [r3, #12]
1000065a:	2b00      	cmp	r3, #0
1000065c:	d049      	beq.n	100006f2 <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
1000065e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000662:	68db      	ldr	r3, [r3, #12]
10000664:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000668:	f043 0301 	orr.w	r3, r3, #1
1000066c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000066e:	f7ff fd71 	bl	10000154 <HAL_GetTick>
10000672:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000674:	e008      	b.n	10000688 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000676:	f7ff fd6d 	bl	10000154 <HAL_GetTick>
1000067a:	4602      	mov	r2, r0
1000067c:	68bb      	ldr	r3, [r7, #8]
1000067e:	1ad3      	subs	r3, r2, r3
10000680:	2b64      	cmp	r3, #100	@ 0x64
10000682:	d901      	bls.n	10000688 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10000684:	2303      	movs	r3, #3
10000686:	e193      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000688:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000068c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000690:	f003 0301 	and.w	r3, r3, #1
10000694:	2b01      	cmp	r3, #1
10000696:	d1ee      	bne.n	10000676 <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000698:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000069c:	699b      	ldr	r3, [r3, #24]
1000069e:	f023 0203 	bic.w	r2, r3, #3
100006a2:	687b      	ldr	r3, [r7, #4]
100006a4:	695b      	ldr	r3, [r3, #20]
100006a6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100006aa:	4313      	orrs	r3, r2
100006ac:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100006ae:	f7ff fd51 	bl	10000154 <HAL_GetTick>
100006b2:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100006b4:	e008      	b.n	100006c8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100006b6:	f7ff fd4d 	bl	10000154 <HAL_GetTick>
100006ba:	4602      	mov	r2, r0
100006bc:	68bb      	ldr	r3, [r7, #8]
100006be:	1ad3      	subs	r3, r2, r3
100006c0:	2b64      	cmp	r3, #100	@ 0x64
100006c2:	d901      	bls.n	100006c8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
100006c4:	2303      	movs	r3, #3
100006c6:	e173      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100006c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100006cc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100006d0:	f003 0304 	and.w	r3, r3, #4
100006d4:	2b04      	cmp	r3, #4
100006d6:	d1ee      	bne.n	100006b6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
100006d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100006dc:	699b      	ldr	r3, [r3, #24]
100006de:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
100006e2:	687b      	ldr	r3, [r7, #4]
100006e4:	691b      	ldr	r3, [r3, #16]
100006e6:	021b      	lsls	r3, r3, #8
100006e8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100006ec:	4313      	orrs	r3, r2
100006ee:	618b      	str	r3, [r1, #24]
100006f0:	e01a      	b.n	10000728 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
100006f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100006f6:	2201      	movs	r2, #1
100006f8:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100006fa:	f7ff fd2b 	bl	10000154 <HAL_GetTick>
100006fe:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000700:	e008      	b.n	10000714 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000702:	f7ff fd27 	bl	10000154 <HAL_GetTick>
10000706:	4602      	mov	r2, r0
10000708:	68bb      	ldr	r3, [r7, #8]
1000070a:	1ad3      	subs	r3, r2, r3
1000070c:	2b64      	cmp	r3, #100	@ 0x64
1000070e:	d901      	bls.n	10000714 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10000710:	2303      	movs	r3, #3
10000712:	e14d      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000714:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000718:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000071c:	f003 0301 	and.w	r3, r3, #1
10000720:	2b01      	cmp	r3, #1
10000722:	d0ee      	beq.n	10000702 <HAL_RCC_OscConfig+0x3aa>
10000724:	e000      	b.n	10000728 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000726:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10000728:	687b      	ldr	r3, [r7, #4]
1000072a:	681b      	ldr	r3, [r3, #0]
1000072c:	f003 0310 	and.w	r3, r3, #16
10000730:	2b00      	cmp	r3, #0
10000732:	f000 8091 	beq.w	10000858 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10000736:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000073a:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
1000073e:	f003 0303 	and.w	r3, r3, #3
10000742:	2b02      	cmp	r3, #2
10000744:	d107      	bne.n	10000756 <HAL_RCC_OscConfig+0x3fe>
10000746:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000074a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000074e:	f003 0302 	and.w	r3, r3, #2
10000752:	2b02      	cmp	r3, #2
10000754:	d01e      	beq.n	10000794 <HAL_RCC_OscConfig+0x43c>
10000756:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000075a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000075c:	f003 0303 	and.w	r3, r3, #3
10000760:	2b02      	cmp	r3, #2
10000762:	d107      	bne.n	10000774 <HAL_RCC_OscConfig+0x41c>
10000764:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000076a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000076e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000772:	d00f      	beq.n	10000794 <HAL_RCC_OscConfig+0x43c>
10000774:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000778:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
1000077c:	f003 0303 	and.w	r3, r3, #3
10000780:	2b02      	cmp	r3, #2
10000782:	d122      	bne.n	100007ca <HAL_RCC_OscConfig+0x472>
10000784:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000788:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000078c:	f003 0302 	and.w	r3, r3, #2
10000790:	2b02      	cmp	r3, #2
10000792:	d11a      	bne.n	100007ca <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10000794:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000798:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000079c:	f003 0310 	and.w	r3, r3, #16
100007a0:	2b10      	cmp	r3, #16
100007a2:	d105      	bne.n	100007b0 <HAL_RCC_OscConfig+0x458>
100007a4:	687b      	ldr	r3, [r7, #4]
100007a6:	69db      	ldr	r3, [r3, #28]
100007a8:	2b10      	cmp	r3, #16
100007aa:	d001      	beq.n	100007b0 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
100007ac:	2301      	movs	r3, #1
100007ae:	e0ff      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
100007b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100007b4:	69db      	ldr	r3, [r3, #28]
100007b6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
100007ba:	687b      	ldr	r3, [r7, #4]
100007bc:	6a1b      	ldr	r3, [r3, #32]
100007be:	021b      	lsls	r3, r3, #8
100007c0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100007c4:	4313      	orrs	r3, r2
100007c6:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
100007c8:	e046      	b.n	10000858 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
100007ca:	687b      	ldr	r3, [r7, #4]
100007cc:	69db      	ldr	r3, [r3, #28]
100007ce:	2b00      	cmp	r3, #0
100007d0:	d029      	beq.n	10000826 <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
100007d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100007d6:	68db      	ldr	r3, [r3, #12]
100007d8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100007dc:	f043 0310 	orr.w	r3, r3, #16
100007e0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100007e2:	f7ff fcb7 	bl	10000154 <HAL_GetTick>
100007e6:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100007e8:	e008      	b.n	100007fc <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
100007ea:	f7ff fcb3 	bl	10000154 <HAL_GetTick>
100007ee:	4602      	mov	r2, r0
100007f0:	68bb      	ldr	r3, [r7, #8]
100007f2:	1ad3      	subs	r3, r2, r3
100007f4:	2b64      	cmp	r3, #100	@ 0x64
100007f6:	d901      	bls.n	100007fc <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
100007f8:	2303      	movs	r3, #3
100007fa:	e0d9      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100007fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000800:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000804:	f003 0310 	and.w	r3, r3, #16
10000808:	2b10      	cmp	r3, #16
1000080a:	d1ee      	bne.n	100007ea <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
1000080c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000810:	69db      	ldr	r3, [r3, #28]
10000812:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
10000816:	687b      	ldr	r3, [r7, #4]
10000818:	6a1b      	ldr	r3, [r3, #32]
1000081a:	021b      	lsls	r3, r3, #8
1000081c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000820:	4313      	orrs	r3, r2
10000822:	61cb      	str	r3, [r1, #28]
10000824:	e018      	b.n	10000858 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10000826:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000082a:	2210      	movs	r2, #16
1000082c:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000082e:	f7ff fc91 	bl	10000154 <HAL_GetTick>
10000832:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10000834:	e008      	b.n	10000848 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10000836:	f7ff fc8d 	bl	10000154 <HAL_GetTick>
1000083a:	4602      	mov	r2, r0
1000083c:	68bb      	ldr	r3, [r7, #8]
1000083e:	1ad3      	subs	r3, r2, r3
10000840:	2b64      	cmp	r3, #100	@ 0x64
10000842:	d901      	bls.n	10000848 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10000844:	2303      	movs	r3, #3
10000846:	e0b3      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10000848:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000084c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000850:	f003 0310 	and.w	r3, r3, #16
10000854:	2b10      	cmp	r3, #16
10000856:	d0ee      	beq.n	10000836 <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10000858:	687b      	ldr	r3, [r7, #4]
1000085a:	681b      	ldr	r3, [r3, #0]
1000085c:	f003 0308 	and.w	r3, r3, #8
10000860:	2b00      	cmp	r3, #0
10000862:	d042      	beq.n	100008ea <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10000864:	687b      	ldr	r3, [r7, #4]
10000866:	699b      	ldr	r3, [r3, #24]
10000868:	2b00      	cmp	r3, #0
1000086a:	d01f      	beq.n	100008ac <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
1000086c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000870:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10000874:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000878:	f043 0301 	orr.w	r3, r3, #1
1000087c:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10000880:	f7ff fc68 	bl	10000154 <HAL_GetTick>
10000884:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10000886:	e008      	b.n	1000089a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10000888:	f7ff fc64 	bl	10000154 <HAL_GetTick>
1000088c:	4602      	mov	r2, r0
1000088e:	68bb      	ldr	r3, [r7, #8]
10000890:	1ad3      	subs	r3, r2, r3
10000892:	2b64      	cmp	r3, #100	@ 0x64
10000894:	d901      	bls.n	1000089a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10000896:	2303      	movs	r3, #3
10000898:	e08a      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
1000089a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000089e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
100008a2:	f003 0302 	and.w	r3, r3, #2
100008a6:	2b02      	cmp	r3, #2
100008a8:	d1ee      	bne.n	10000888 <HAL_RCC_OscConfig+0x530>
100008aa:	e01e      	b.n	100008ea <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
100008ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100008b0:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
100008b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100008b8:	f023 0301 	bic.w	r3, r3, #1
100008bc:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100008c0:	f7ff fc48 	bl	10000154 <HAL_GetTick>
100008c4:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
100008c6:	e008      	b.n	100008da <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100008c8:	f7ff fc44 	bl	10000154 <HAL_GetTick>
100008cc:	4602      	mov	r2, r0
100008ce:	68bb      	ldr	r3, [r7, #8]
100008d0:	1ad3      	subs	r3, r2, r3
100008d2:	2b64      	cmp	r3, #100	@ 0x64
100008d4:	d901      	bls.n	100008da <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
100008d6:	2303      	movs	r3, #3
100008d8:	e06a      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
100008da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100008de:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
100008e2:	f003 0302 	and.w	r3, r3, #2
100008e6:	2b02      	cmp	r3, #2
100008e8:	d0ee      	beq.n	100008c8 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
100008ea:	687b      	ldr	r3, [r7, #4]
100008ec:	681b      	ldr	r3, [r3, #0]
100008ee:	f003 0304 	and.w	r3, r3, #4
100008f2:	2b00      	cmp	r3, #0
100008f4:	d02b      	beq.n	1000094e <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
100008f6:	4b07      	ldr	r3, [pc, #28]	@ (10000914 <HAL_RCC_OscConfig+0x5bc>)
100008f8:	681b      	ldr	r3, [r3, #0]
100008fa:	4a06      	ldr	r2, [pc, #24]	@ (10000914 <HAL_RCC_OscConfig+0x5bc>)
100008fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10000900:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10000902:	f7ff fc27 	bl	10000154 <HAL_GetTick>
10000906:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10000908:	e00f      	b.n	1000092a <HAL_RCC_OscConfig+0x5d2>
1000090a:	bf00      	nop
1000090c:	10020000 	.word	0x10020000
10000910:	10020004 	.word	0x10020004
10000914:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10000918:	f7ff fc1c 	bl	10000154 <HAL_GetTick>
1000091c:	4602      	mov	r2, r0
1000091e:	68bb      	ldr	r3, [r7, #8]
10000920:	1ad3      	subs	r3, r2, r3
10000922:	2b64      	cmp	r3, #100	@ 0x64
10000924:	d901      	bls.n	1000092a <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
10000926:	2303      	movs	r3, #3
10000928:	e042      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000092a:	4b23      	ldr	r3, [pc, #140]	@ (100009b8 <HAL_RCC_OscConfig+0x660>)
1000092c:	681b      	ldr	r3, [r3, #0]
1000092e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10000932:	2b00      	cmp	r3, #0
10000934:	d0f0      	beq.n	10000918 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
10000936:	687b      	ldr	r3, [r7, #4]
10000938:	689b      	ldr	r3, [r3, #8]
1000093a:	4618      	mov	r0, r3
1000093c:	f000 f8a9 	bl	10000a92 <HAL_RCC_LSEConfig>
10000940:	4603      	mov	r3, r0
10000942:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10000944:	7bfb      	ldrb	r3, [r7, #15]
10000946:	2b00      	cmp	r3, #0
10000948:	d001      	beq.n	1000094e <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
1000094a:	7bfb      	ldrb	r3, [r7, #15]
1000094c:	e030      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
1000094e:	687b      	ldr	r3, [r7, #4]
10000950:	3324      	adds	r3, #36	@ 0x24
10000952:	4618      	mov	r0, r3
10000954:	f000 f91a 	bl	10000b8c <RCC_PLL1_Config>
10000958:	4603      	mov	r3, r0
1000095a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000095c:	7bfb      	ldrb	r3, [r7, #15]
1000095e:	2b00      	cmp	r3, #0
10000960:	d001      	beq.n	10000966 <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10000962:	7bfb      	ldrb	r3, [r7, #15]
10000964:	e024      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10000966:	687b      	ldr	r3, [r7, #4]
10000968:	3360      	adds	r3, #96	@ 0x60
1000096a:	4618      	mov	r0, r3
1000096c:	f000 feb0 	bl	100016d0 <RCCEx_PLL2_Config>
10000970:	4603      	mov	r3, r0
10000972:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10000974:	7bfb      	ldrb	r3, [r7, #15]
10000976:	2b00      	cmp	r3, #0
10000978:	d001      	beq.n	1000097e <HAL_RCC_OscConfig+0x626>
  {
    return result;
1000097a:	7bfb      	ldrb	r3, [r7, #15]
1000097c:	e018      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
1000097e:	687b      	ldr	r3, [r7, #4]
10000980:	339c      	adds	r3, #156	@ 0x9c
10000982:	4618      	mov	r0, r3
10000984:	f001 f826 	bl	100019d4 <RCCEx_PLL3_Config>
10000988:	4603      	mov	r3, r0
1000098a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000098c:	7bfb      	ldrb	r3, [r7, #15]
1000098e:	2b00      	cmp	r3, #0
10000990:	d001      	beq.n	10000996 <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10000992:	7bfb      	ldrb	r3, [r7, #15]
10000994:	e00c      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10000996:	687b      	ldr	r3, [r7, #4]
10000998:	33d8      	adds	r3, #216	@ 0xd8
1000099a:	4618      	mov	r0, r3
1000099c:	f001 f984 	bl	10001ca8 <RCCEx_PLL4_Config>
100009a0:	4603      	mov	r3, r0
100009a2:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100009a4:	7bfb      	ldrb	r3, [r7, #15]
100009a6:	2b00      	cmp	r3, #0
100009a8:	d001      	beq.n	100009ae <HAL_RCC_OscConfig+0x656>
  {
    return result;
100009aa:	7bfb      	ldrb	r3, [r7, #15]
100009ac:	e000      	b.n	100009b0 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
100009ae:	2300      	movs	r3, #0
}
100009b0:	4618      	mov	r0, r3
100009b2:	3710      	adds	r7, #16
100009b4:	46bd      	mov	sp, r7
100009b6:	bd80      	pop	{r7, pc}
100009b8:	50001000 	.word	0x50001000

100009bc <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
100009bc:	b580      	push	{r7, lr}
100009be:	b084      	sub	sp, #16
100009c0:	af00      	add	r7, sp, #0
100009c2:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
100009c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100009c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
100009cc:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100009ce:	f7ff fbc1 	bl	10000154 <HAL_GetTick>
100009d2:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100009d4:	e008      	b.n	100009e8 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100009d6:	f7ff fbbd 	bl	10000154 <HAL_GetTick>
100009da:	4602      	mov	r2, r0
100009dc:	68fb      	ldr	r3, [r7, #12]
100009de:	1ad3      	subs	r3, r2, r3
100009e0:	2b64      	cmp	r3, #100	@ 0x64
100009e2:	d901      	bls.n	100009e8 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
100009e4:	2303      	movs	r3, #3
100009e6:	e050      	b.n	10000a8a <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100009e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100009ec:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100009f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100009f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100009f8:	d0ed      	beq.n	100009d6 <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
100009fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100009fe:	f44f 6290 	mov.w	r2, #1152	@ 0x480
10000a02:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
10000a04:	687b      	ldr	r3, [r7, #4]
10000a06:	2b00      	cmp	r3, #0
10000a08:	d03e      	beq.n	10000a88 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10000a0a:	687b      	ldr	r3, [r7, #4]
10000a0c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
10000a10:	d108      	bne.n	10000a24 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10000a12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000a16:	68db      	ldr	r3, [r3, #12]
10000a18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000a1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10000a20:	60d3      	str	r3, [r2, #12]
10000a22:	e013      	b.n	10000a4c <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
10000a24:	687b      	ldr	r3, [r7, #4]
10000a26:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
10000a2a:	d10f      	bne.n	10000a4c <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10000a2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000a30:	68db      	ldr	r3, [r3, #12]
10000a32:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10000a3a:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10000a3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000a40:	68db      	ldr	r3, [r3, #12]
10000a42:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000a46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10000a4a:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10000a4c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000a50:	68db      	ldr	r3, [r3, #12]
10000a52:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10000a5a:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10000a5c:	f7ff fb7a 	bl	10000154 <HAL_GetTick>
10000a60:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10000a62:	e008      	b.n	10000a76 <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10000a64:	f7ff fb76 	bl	10000154 <HAL_GetTick>
10000a68:	4602      	mov	r2, r0
10000a6a:	68fb      	ldr	r3, [r7, #12]
10000a6c:	1ad3      	subs	r3, r2, r3
10000a6e:	2b64      	cmp	r3, #100	@ 0x64
10000a70:	d901      	bls.n	10000a76 <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
10000a72:	2303      	movs	r3, #3
10000a74:	e009      	b.n	10000a8a <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10000a76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000a7a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10000a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10000a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10000a86:	d1ed      	bne.n	10000a64 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10000a88:	2300      	movs	r3, #0
}
10000a8a:	4618      	mov	r0, r3
10000a8c:	3710      	adds	r7, #16
10000a8e:	46bd      	mov	sp, r7
10000a90:	bd80      	pop	{r7, pc}

10000a92 <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10000a92:	b580      	push	{r7, lr}
10000a94:	b084      	sub	sp, #16
10000a96:	af00      	add	r7, sp, #0
10000a98:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10000a9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000a9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10000aa2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000aa6:	f023 0301 	bic.w	r3, r3, #1
10000aaa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10000aae:	f7ff fb51 	bl	10000154 <HAL_GetTick>
10000ab2:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10000ab4:	e00a      	b.n	10000acc <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10000ab6:	f7ff fb4d 	bl	10000154 <HAL_GetTick>
10000aba:	4602      	mov	r2, r0
10000abc:	68fb      	ldr	r3, [r7, #12]
10000abe:	1ad3      	subs	r3, r2, r3
10000ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
10000ac4:	4293      	cmp	r3, r2
10000ac6:	d901      	bls.n	10000acc <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10000ac8:	2303      	movs	r3, #3
10000aca:	e05b      	b.n	10000b84 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10000acc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ad0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10000ad4:	f003 0304 	and.w	r3, r3, #4
10000ad8:	2b04      	cmp	r3, #4
10000ada:	d0ec      	beq.n	10000ab6 <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10000adc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ae0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10000ae4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000ae8:	f023 030a 	bic.w	r3, r3, #10
10000aec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10000af0:	687b      	ldr	r3, [r7, #4]
10000af2:	2b00      	cmp	r3, #0
10000af4:	d045      	beq.n	10000b82 <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
10000af6:	687b      	ldr	r3, [r7, #4]
10000af8:	2b03      	cmp	r3, #3
10000afa:	d10a      	bne.n	10000b12 <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10000afc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10000b04:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000b08:	f043 0302 	orr.w	r3, r3, #2
10000b0c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
10000b10:	e016      	b.n	10000b40 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
10000b12:	687b      	ldr	r3, [r7, #4]
10000b14:	2b0b      	cmp	r3, #11
10000b16:	d113      	bne.n	10000b40 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10000b18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10000b20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000b24:	f043 0308 	orr.w	r3, r3, #8
10000b28:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10000b2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10000b34:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000b38:	f043 0302 	orr.w	r3, r3, #2
10000b3c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10000b40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10000b48:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000b4c:	f043 0301 	orr.w	r3, r3, #1
10000b50:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10000b54:	f7ff fafe 	bl	10000154 <HAL_GetTick>
10000b58:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10000b5a:	e00a      	b.n	10000b72 <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10000b5c:	f7ff fafa 	bl	10000154 <HAL_GetTick>
10000b60:	4602      	mov	r2, r0
10000b62:	68fb      	ldr	r3, [r7, #12]
10000b64:	1ad3      	subs	r3, r2, r3
10000b66:	f241 3288 	movw	r2, #5000	@ 0x1388
10000b6a:	4293      	cmp	r3, r2
10000b6c:	d901      	bls.n	10000b72 <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10000b6e:	2303      	movs	r3, #3
10000b70:	e008      	b.n	10000b84 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10000b72:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10000b7a:	f003 0304 	and.w	r3, r3, #4
10000b7e:	2b04      	cmp	r3, #4
10000b80:	d1ec      	bne.n	10000b5c <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10000b82:	2300      	movs	r3, #0
}
10000b84:	4618      	mov	r0, r3
10000b86:	3710      	adds	r7, #16
10000b88:	46bd      	mov	sp, r7
10000b8a:	bd80      	pop	{r7, pc}

10000b8c <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10000b8c:	b580      	push	{r7, lr}
10000b8e:	b084      	sub	sp, #16
10000b90:	af00      	add	r7, sp, #0
10000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10000b94:	687b      	ldr	r3, [r7, #4]
10000b96:	681b      	ldr	r3, [r3, #0]
10000b98:	2b00      	cmp	r3, #0
10000b9a:	f000 8174 	beq.w	10000e86 <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10000b9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ba2:	6a1b      	ldr	r3, [r3, #32]
10000ba4:	f003 0303 	and.w	r3, r3, #3
10000ba8:	2b02      	cmp	r3, #2
10000baa:	d108      	bne.n	10000bbe <RCC_PLL1_Config+0x32>
10000bac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000bb0:	6a1b      	ldr	r3, [r3, #32]
10000bb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000bba:	f000 8162 	beq.w	10000e82 <RCC_PLL1_Config+0x2f6>
10000bbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000bc2:	6a1b      	ldr	r3, [r3, #32]
10000bc4:	f003 0303 	and.w	r3, r3, #3
10000bc8:	2b03      	cmp	r3, #3
10000bca:	d108      	bne.n	10000bde <RCC_PLL1_Config+0x52>
10000bcc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000bd0:	6a1b      	ldr	r3, [r3, #32]
10000bd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000bda:	f000 8152 	beq.w	10000e82 <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10000bde:	687b      	ldr	r3, [r7, #4]
10000be0:	681b      	ldr	r3, [r3, #0]
10000be2:	2b02      	cmp	r3, #2
10000be4:	f040 8123 	bne.w	10000e2e <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10000be8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000bf0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10000bf8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10000bfc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000c04:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000c08:	f023 0301 	bic.w	r3, r3, #1
10000c0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000c10:	f7ff faa0 	bl	10000154 <HAL_GetTick>
10000c14:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10000c16:	e008      	b.n	10000c2a <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10000c18:	f7ff fa9c 	bl	10000154 <HAL_GetTick>
10000c1c:	4602      	mov	r2, r0
10000c1e:	68fb      	ldr	r3, [r7, #12]
10000c20:	1ad3      	subs	r3, r2, r3
10000c22:	2b64      	cmp	r3, #100	@ 0x64
10000c24:	d901      	bls.n	10000c2a <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
10000c26:	2303      	movs	r3, #3
10000c28:	e12e      	b.n	10000e88 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10000c2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000c32:	f003 0302 	and.w	r3, r3, #2
10000c36:	2b02      	cmp	r3, #2
10000c38:	d0ee      	beq.n	10000c18 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
10000c3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10000c40:	f003 0307 	and.w	r3, r3, #7
10000c44:	2b02      	cmp	r3, #2
10000c46:	d112      	bne.n	10000c6e <RCC_PLL1_Config+0xe2>
10000c48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10000c4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000c52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000c56:	d10a      	bne.n	10000c6e <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10000c58:	687b      	ldr	r3, [r7, #4]
10000c5a:	685a      	ldr	r2, [r3, #4]
10000c5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10000c62:	f003 0303 	and.w	r3, r3, #3
10000c66:	429a      	cmp	r2, r3
10000c68:	d00c      	beq.n	10000c84 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10000c6a:	2301      	movs	r3, #1
10000c6c:	e10c      	b.n	10000e88 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10000c6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10000c74:	f023 0203 	bic.w	r2, r3, #3
10000c78:	687b      	ldr	r3, [r7, #4]
10000c7a:	685b      	ldr	r3, [r3, #4]
10000c7c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000c80:	4313      	orrs	r3, r2
10000c82:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10000c84:	e008      	b.n	10000c98 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10000c86:	f7ff fa65 	bl	10000154 <HAL_GetTick>
10000c8a:	4602      	mov	r2, r0
10000c8c:	68fb      	ldr	r3, [r7, #12]
10000c8e:	1ad3      	subs	r3, r2, r3
10000c90:	2b64      	cmp	r3, #100	@ 0x64
10000c92:	d901      	bls.n	10000c98 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10000c94:	2303      	movs	r3, #3
10000c96:	e0f7      	b.n	10000e88 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10000c98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10000c9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000ca6:	d1ee      	bne.n	10000c86 <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10000ca8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000cac:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
10000cb0:	4b77      	ldr	r3, [pc, #476]	@ (10000e90 <RCC_PLL1_Config+0x304>)
10000cb2:	4013      	ands	r3, r2
10000cb4:	687a      	ldr	r2, [r7, #4]
10000cb6:	68d2      	ldr	r2, [r2, #12]
10000cb8:	1e51      	subs	r1, r2, #1
10000cba:	687a      	ldr	r2, [r7, #4]
10000cbc:	6892      	ldr	r2, [r2, #8]
10000cbe:	3a01      	subs	r2, #1
10000cc0:	0412      	lsls	r2, r2, #16
10000cc2:	430a      	orrs	r2, r1
10000cc4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000cc8:	4313      	orrs	r3, r2
10000cca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
10000cce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
10000cd6:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10000cda:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10000cde:	687a      	ldr	r2, [r7, #4]
10000ce0:	6912      	ldr	r2, [r2, #16]
10000ce2:	1e51      	subs	r1, r2, #1
10000ce4:	687a      	ldr	r2, [r7, #4]
10000ce6:	6952      	ldr	r2, [r2, #20]
10000ce8:	3a01      	subs	r2, #1
10000cea:	0212      	lsls	r2, r2, #8
10000cec:	4311      	orrs	r1, r2
10000cee:	687a      	ldr	r2, [r7, #4]
10000cf0:	6992      	ldr	r2, [r2, #24]
10000cf2:	3a01      	subs	r2, #1
10000cf4:	0412      	lsls	r2, r2, #16
10000cf6:	430a      	orrs	r2, r1
10000cf8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000cfc:	4313      	orrs	r3, r2
10000cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
10000d02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10000d0a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10000d12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
10000d16:	687b      	ldr	r3, [r7, #4]
10000d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10000d1a:	2b02      	cmp	r3, #2
10000d1c:	d003      	beq.n	10000d26 <RCC_PLL1_Config+0x19a>
10000d1e:	687b      	ldr	r3, [r7, #4]
10000d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10000d22:	2b00      	cmp	r3, #0
10000d24:	d10c      	bne.n	10000d40 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
10000d26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10000d2e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000d32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10000d36:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10000d3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
10000d3e:	e00f      	b.n	10000d60 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10000d40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10000d48:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10000d4c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10000d50:	687a      	ldr	r2, [r7, #4]
10000d52:	6a12      	ldr	r2, [r2, #32]
10000d54:	00d2      	lsls	r2, r2, #3
10000d56:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000d5a:	4313      	orrs	r3, r2
10000d5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10000d60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10000d68:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10000d70:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10000d74:	687b      	ldr	r3, [r7, #4]
10000d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10000d78:	2b02      	cmp	r3, #2
10000d7a:	d124      	bne.n	10000dc6 <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10000d7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
10000d84:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10000d88:	687b      	ldr	r3, [r7, #4]
10000d8a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10000d8c:	687b      	ldr	r3, [r7, #4]
10000d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10000d90:	4319      	orrs	r1, r3
10000d92:	687b      	ldr	r3, [r7, #4]
10000d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10000d96:	4319      	orrs	r1, r3
10000d98:	687b      	ldr	r3, [r7, #4]
10000d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10000d9c:	4319      	orrs	r1, r3
10000d9e:	687b      	ldr	r3, [r7, #4]
10000da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10000da2:	041b      	lsls	r3, r3, #16
10000da4:	430b      	orrs	r3, r1
10000da6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000daa:	4313      	orrs	r3, r2
10000dac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10000db0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000db8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000dbc:	f043 0304 	orr.w	r3, r3, #4
10000dc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
10000dc4:	e009      	b.n	10000dda <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
10000dc6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000dce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000dd2:	f023 0304 	bic.w	r3, r3, #4
10000dd6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10000dda:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000de2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000de6:	f043 0301 	orr.w	r3, r3, #1
10000dea:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000dee:	f7ff f9b1 	bl	10000154 <HAL_GetTick>
10000df2:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10000df4:	e008      	b.n	10000e08 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10000df6:	f7ff f9ad 	bl	10000154 <HAL_GetTick>
10000dfa:	4602      	mov	r2, r0
10000dfc:	68fb      	ldr	r3, [r7, #12]
10000dfe:	1ad3      	subs	r3, r2, r3
10000e00:	2b64      	cmp	r3, #100	@ 0x64
10000e02:	d901      	bls.n	10000e08 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
10000e04:	2303      	movs	r3, #3
10000e06:	e03f      	b.n	10000e88 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10000e08:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000e10:	f003 0302 	and.w	r3, r3, #2
10000e14:	2b02      	cmp	r3, #2
10000e16:	d1ee      	bne.n	10000df6 <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10000e18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000e20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000e24:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10000e28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10000e2c:	e02b      	b.n	10000e86 <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10000e2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000e36:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10000e3e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10000e42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000e4a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000e4e:	f023 0301 	bic.w	r3, r3, #1
10000e52:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000e56:	f7ff f97d 	bl	10000154 <HAL_GetTick>
10000e5a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10000e5c:	e008      	b.n	10000e70 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10000e5e:	f7ff f979 	bl	10000154 <HAL_GetTick>
10000e62:	4602      	mov	r2, r0
10000e64:	68fb      	ldr	r3, [r7, #12]
10000e66:	1ad3      	subs	r3, r2, r3
10000e68:	2b64      	cmp	r3, #100	@ 0x64
10000e6a:	d901      	bls.n	10000e70 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10000e6c:	2303      	movs	r3, #3
10000e6e:	e00b      	b.n	10000e88 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10000e70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10000e78:	f003 0302 	and.w	r3, r3, #2
10000e7c:	2b02      	cmp	r3, #2
10000e7e:	d0ee      	beq.n	10000e5e <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10000e80:	e001      	b.n	10000e86 <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10000e82:	2301      	movs	r3, #1
10000e84:	e000      	b.n	10000e88 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
10000e86:	2300      	movs	r3, #0

}
10000e88:	4618      	mov	r0, r3
10000e8a:	3710      	adds	r7, #16
10000e8c:	46bd      	mov	sp, r7
10000e8e:	bd80      	pop	{r7, pc}
10000e90:	ffc0fe00 	.word	0xffc0fe00

10000e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10000e94:	b580      	push	{r7, lr}
10000e96:	b084      	sub	sp, #16
10000e98:	af00      	add	r7, sp, #0
10000e9a:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10000e9c:	2300      	movs	r3, #0
10000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10000ea0:	687b      	ldr	r3, [r7, #4]
10000ea2:	2b00      	cmp	r3, #0
10000ea4:	d101      	bne.n	10000eaa <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
10000ea6:	2301      	movs	r3, #1
10000ea8:	e102      	b.n	100010b0 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10000eaa:	687b      	ldr	r3, [r7, #4]
10000eac:	681b      	ldr	r3, [r3, #0]
10000eae:	f003 0301 	and.w	r3, r3, #1
10000eb2:	2b00      	cmp	r3, #0
10000eb4:	d00b      	beq.n	10000ece <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
10000eb6:	687b      	ldr	r3, [r7, #4]
10000eb8:	3304      	adds	r3, #4
10000eba:	4618      	mov	r0, r3
10000ebc:	f000 f8fc 	bl	100010b8 <RCC_MPUConfig>
10000ec0:	4603      	mov	r3, r0
10000ec2:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10000ec4:	7bfb      	ldrb	r3, [r7, #15]
10000ec6:	2b00      	cmp	r3, #0
10000ec8:	d001      	beq.n	10000ece <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10000eca:	7bfb      	ldrb	r3, [r7, #15]
10000ecc:	e0f0      	b.n	100010b0 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10000ece:	687b      	ldr	r3, [r7, #4]
10000ed0:	681b      	ldr	r3, [r3, #0]
10000ed2:	f003 0302 	and.w	r3, r3, #2
10000ed6:	2b00      	cmp	r3, #0
10000ed8:	d00b      	beq.n	10000ef2 <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10000eda:	687b      	ldr	r3, [r7, #4]
10000edc:	330c      	adds	r3, #12
10000ede:	4618      	mov	r0, r3
10000ee0:	f000 f960 	bl	100011a4 <RCC_AXISSConfig>
10000ee4:	4603      	mov	r3, r0
10000ee6:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10000ee8:	7bfb      	ldrb	r3, [r7, #15]
10000eea:	2b00      	cmp	r3, #0
10000eec:	d001      	beq.n	10000ef2 <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10000eee:	7bfb      	ldrb	r3, [r7, #15]
10000ef0:	e0de      	b.n	100010b0 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
10000ef2:	687b      	ldr	r3, [r7, #4]
10000ef4:	681b      	ldr	r3, [r3, #0]
10000ef6:	f003 0304 	and.w	r3, r3, #4
10000efa:	2b00      	cmp	r3, #0
10000efc:	d00b      	beq.n	10000f16 <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10000efe:	687b      	ldr	r3, [r7, #4]
10000f00:	3314      	adds	r3, #20
10000f02:	4618      	mov	r0, r3
10000f04:	f000 f9e6 	bl	100012d4 <RCC_MCUConfig>
10000f08:	4603      	mov	r3, r0
10000f0a:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10000f0c:	7bfb      	ldrb	r3, [r7, #15]
10000f0e:	2b00      	cmp	r3, #0
10000f10:	d001      	beq.n	10000f16 <HAL_RCC_ClockConfig+0x82>
    {
      return status;
10000f12:	7bfb      	ldrb	r3, [r7, #15]
10000f14:	e0cc      	b.n	100010b0 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
10000f16:	687b      	ldr	r3, [r7, #4]
10000f18:	681b      	ldr	r3, [r3, #0]
10000f1a:	f003 0308 	and.w	r3, r3, #8
10000f1e:	2b00      	cmp	r3, #0
10000f20:	d020      	beq.n	10000f64 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
10000f22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10000f28:	f023 0207 	bic.w	r2, r3, #7
10000f2c:	687b      	ldr	r3, [r7, #4]
10000f2e:	69db      	ldr	r3, [r3, #28]
10000f30:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000f34:	4313      	orrs	r3, r2
10000f36:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10000f38:	f7ff f90c 	bl	10000154 <HAL_GetTick>
10000f3c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10000f3e:	e009      	b.n	10000f54 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10000f40:	f7ff f908 	bl	10000154 <HAL_GetTick>
10000f44:	4602      	mov	r2, r0
10000f46:	68bb      	ldr	r3, [r7, #8]
10000f48:	1ad3      	subs	r3, r2, r3
10000f4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10000f4e:	d901      	bls.n	10000f54 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10000f50:	2303      	movs	r3, #3
10000f52:	e0ad      	b.n	100010b0 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10000f54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10000f5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000f62:	d1ed      	bne.n	10000f40 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10000f64:	687b      	ldr	r3, [r7, #4]
10000f66:	681b      	ldr	r3, [r3, #0]
10000f68:	f003 0310 	and.w	r3, r3, #16
10000f6c:	2b00      	cmp	r3, #0
10000f6e:	d020      	beq.n	10000fb2 <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10000f70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10000f76:	f023 0207 	bic.w	r2, r3, #7
10000f7a:	687b      	ldr	r3, [r7, #4]
10000f7c:	6a1b      	ldr	r3, [r3, #32]
10000f7e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000f82:	4313      	orrs	r3, r2
10000f84:	640b      	str	r3, [r1, #64]	@ 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10000f86:	f7ff f8e5 	bl	10000154 <HAL_GetTick>
10000f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10000f8c:	e009      	b.n	10000fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10000f8e:	f7ff f8e1 	bl	10000154 <HAL_GetTick>
10000f92:	4602      	mov	r2, r0
10000f94:	68bb      	ldr	r3, [r7, #8]
10000f96:	1ad3      	subs	r3, r2, r3
10000f98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10000f9c:	d901      	bls.n	10000fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10000f9e:	2303      	movs	r3, #3
10000fa0:	e086      	b.n	100010b0 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10000fa2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10000fa8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10000fac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10000fb0:	d1ed      	bne.n	10000f8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
10000fb2:	687b      	ldr	r3, [r7, #4]
10000fb4:	681b      	ldr	r3, [r3, #0]
10000fb6:	f003 0320 	and.w	r3, r3, #32
10000fba:	2b00      	cmp	r3, #0
10000fbc:	d023      	beq.n	10001006 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10000fbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000fc2:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10000fc6:	f023 0207 	bic.w	r2, r3, #7
10000fca:	687b      	ldr	r3, [r7, #4]
10000fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10000fce:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10000fd2:	4313      	orrs	r3, r2
10000fd4:	f8c1 3834 	str.w	r3, [r1, #2100]	@ 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10000fd8:	f7ff f8bc 	bl	10000154 <HAL_GetTick>
10000fdc:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10000fde:	e009      	b.n	10000ff4 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10000fe0:	f7ff f8b8 	bl	10000154 <HAL_GetTick>
10000fe4:	4602      	mov	r2, r0
10000fe6:	68bb      	ldr	r3, [r7, #8]
10000fe8:	1ad3      	subs	r3, r2, r3
10000fea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10000fee:	d901      	bls.n	10000ff4 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10000ff0:	2303      	movs	r3, #3
10000ff2:	e05d      	b.n	100010b0 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10000ff4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000ff8:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10000ffc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001000:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001004:	d1ec      	bne.n	10000fe0 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10001006:	687b      	ldr	r3, [r7, #4]
10001008:	681b      	ldr	r3, [r3, #0]
1000100a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
1000100e:	2b00      	cmp	r3, #0
10001010:	d023      	beq.n	1000105a <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
10001012:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001016:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
1000101a:	f023 0207 	bic.w	r2, r3, #7
1000101e:	687b      	ldr	r3, [r7, #4]
10001020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001022:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001026:	4313      	orrs	r3, r2
10001028:	f8c1 3838 	str.w	r3, [r1, #2104]	@ 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000102c:	f7ff f892 	bl	10000154 <HAL_GetTick>
10001030:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10001032:	e009      	b.n	10001048 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001034:	f7ff f88e 	bl	10000154 <HAL_GetTick>
10001038:	4602      	mov	r2, r0
1000103a:	68bb      	ldr	r3, [r7, #8]
1000103c:	1ad3      	subs	r3, r2, r3
1000103e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001042:	d901      	bls.n	10001048 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10001044:	2303      	movs	r3, #3
10001046:	e033      	b.n	100010b0 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10001048:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000104c:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10001050:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001054:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001058:	d1ec      	bne.n	10001034 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
1000105a:	687b      	ldr	r3, [r7, #4]
1000105c:	681b      	ldr	r3, [r3, #0]
1000105e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
10001062:	2b00      	cmp	r3, #0
10001064:	d023      	beq.n	100010ae <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
10001066:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000106a:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
1000106e:	f023 0207 	bic.w	r2, r3, #7
10001072:	687b      	ldr	r3, [r7, #4]
10001074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10001076:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000107a:	4313      	orrs	r3, r2
1000107c:	f8c1 383c 	str.w	r3, [r1, #2108]	@ 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001080:	f7ff f868 	bl	10000154 <HAL_GetTick>
10001084:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10001086:	e009      	b.n	1000109c <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001088:	f7ff f864 	bl	10000154 <HAL_GetTick>
1000108c:	4602      	mov	r2, r0
1000108e:	68bb      	ldr	r3, [r7, #8]
10001090:	1ad3      	subs	r3, r2, r3
10001092:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001096:	d901      	bls.n	1000109c <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10001098:	2303      	movs	r3, #3
1000109a:	e009      	b.n	100010b0 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
1000109c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100010a0:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
100010a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100010a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100010ac:	d1ec      	bne.n	10001088 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
100010ae:	2300      	movs	r3, #0
}
100010b0:	4618      	mov	r0, r3
100010b2:	3710      	adds	r7, #16
100010b4:	46bd      	mov	sp, r7
100010b6:	bd80      	pop	{r7, pc}

100010b8 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
100010b8:	b580      	push	{r7, lr}
100010ba:	b084      	sub	sp, #16
100010bc:	af00      	add	r7, sp, #0
100010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
100010c0:	687b      	ldr	r3, [r7, #4]
100010c2:	681b      	ldr	r3, [r3, #0]
100010c4:	2b03      	cmp	r3, #3
100010c6:	d840      	bhi.n	1000114a <RCC_MPUConfig+0x92>
100010c8:	a201      	add	r2, pc, #4	@ (adr r2, 100010d0 <RCC_MPUConfig+0x18>)
100010ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100010ce:	bf00      	nop
100010d0:	100010e1 	.word	0x100010e1
100010d4:	100010f5 	.word	0x100010f5
100010d8:	1000110b 	.word	0x1000110b
100010dc:	1000111f 	.word	0x1000111f
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100010e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100010e4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100010e8:	f003 0301 	and.w	r3, r3, #1
100010ec:	2b01      	cmp	r3, #1
100010ee:	d02e      	beq.n	1000114e <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
100010f0:	2301      	movs	r3, #1
100010f2:	e053      	b.n	1000119c <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100010f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100010f8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100010fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001104:	d025      	beq.n	10001152 <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
10001106:	2301      	movs	r3, #1
10001108:	e048      	b.n	1000119c <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000110a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000110e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001112:	f003 0302 	and.w	r3, r3, #2
10001116:	2b02      	cmp	r3, #2
10001118:	d01d      	beq.n	10001156 <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
1000111a:	2301      	movs	r3, #1
1000111c:	e03e      	b.n	1000119c <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000111e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001126:	f003 0302 	and.w	r3, r3, #2
1000112a:	2b02      	cmp	r3, #2
1000112c:	d001      	beq.n	10001132 <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
1000112e:	2301      	movs	r3, #1
10001130:	e034      	b.n	1000119c <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
10001132:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10001138:	f023 0207 	bic.w	r2, r3, #7
1000113c:	687b      	ldr	r3, [r7, #4]
1000113e:	685b      	ldr	r3, [r3, #4]
10001140:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001144:	4313      	orrs	r3, r2
10001146:	62cb      	str	r3, [r1, #44]	@ 0x2c

      break;
10001148:	e006      	b.n	10001158 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
1000114a:	2301      	movs	r3, #1
1000114c:	e026      	b.n	1000119c <RCC_MPUConfig+0xe4>
      break;
1000114e:	bf00      	nop
10001150:	e002      	b.n	10001158 <RCC_MPUConfig+0xa0>
      break;
10001152:	bf00      	nop
10001154:	e000      	b.n	10001158 <RCC_MPUConfig+0xa0>
      break;
10001156:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10001158:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000115c:	6a1b      	ldr	r3, [r3, #32]
1000115e:	f023 0203 	bic.w	r2, r3, #3
10001162:	687b      	ldr	r3, [r7, #4]
10001164:	681b      	ldr	r3, [r3, #0]
10001166:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000116a:	4313      	orrs	r3, r2
1000116c:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000116e:	f7fe fff1 	bl	10000154 <HAL_GetTick>
10001172:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001174:	e009      	b.n	1000118a <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001176:	f7fe ffed 	bl	10000154 <HAL_GetTick>
1000117a:	4602      	mov	r2, r0
1000117c:	68fb      	ldr	r3, [r7, #12]
1000117e:	1ad3      	subs	r3, r2, r3
10001180:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001184:	d901      	bls.n	1000118a <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
10001186:	2303      	movs	r3, #3
10001188:	e008      	b.n	1000119c <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
1000118a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000118e:	6a1b      	ldr	r3, [r3, #32]
10001190:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001194:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001198:	d1ed      	bne.n	10001176 <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
1000119a:	2300      	movs	r3, #0
}
1000119c:	4618      	mov	r0, r3
1000119e:	3710      	adds	r7, #16
100011a0:	46bd      	mov	sp, r7
100011a2:	bd80      	pop	{r7, pc}

100011a4 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
100011a4:	b580      	push	{r7, lr}
100011a6:	b084      	sub	sp, #16
100011a8:	af00      	add	r7, sp, #0
100011aa:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
100011ac:	687b      	ldr	r3, [r7, #4]
100011ae:	681b      	ldr	r3, [r3, #0]
100011b0:	2b02      	cmp	r3, #2
100011b2:	d01b      	beq.n	100011ec <RCC_AXISSConfig+0x48>
100011b4:	2b02      	cmp	r3, #2
100011b6:	d823      	bhi.n	10001200 <RCC_AXISSConfig+0x5c>
100011b8:	2b00      	cmp	r3, #0
100011ba:	d002      	beq.n	100011c2 <RCC_AXISSConfig+0x1e>
100011bc:	2b01      	cmp	r3, #1
100011be:	d00a      	beq.n	100011d6 <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
100011c0:	e01e      	b.n	10001200 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100011c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011c6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100011ca:	f003 0301 	and.w	r3, r3, #1
100011ce:	2b01      	cmp	r3, #1
100011d0:	d018      	beq.n	10001204 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
100011d2:	2301      	movs	r3, #1
100011d4:	e079      	b.n	100012ca <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100011d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011da:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100011de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100011e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100011e6:	d00f      	beq.n	10001208 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
100011e8:	2301      	movs	r3, #1
100011ea:	e06e      	b.n	100012ca <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100011ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100011f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100011f4:	f003 0302 	and.w	r3, r3, #2
100011f8:	2b02      	cmp	r3, #2
100011fa:	d007      	beq.n	1000120c <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
100011fc:	2301      	movs	r3, #1
100011fe:	e064      	b.n	100012ca <RCC_AXISSConfig+0x126>
      break;
10001200:	bf00      	nop
10001202:	e004      	b.n	1000120e <RCC_AXISSConfig+0x6a>
      break;
10001204:	bf00      	nop
10001206:	e002      	b.n	1000120e <RCC_AXISSConfig+0x6a>
      break;
10001208:	bf00      	nop
1000120a:	e000      	b.n	1000120e <RCC_AXISSConfig+0x6a>
      break;
1000120c:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
1000120e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001214:	f023 0207 	bic.w	r2, r3, #7
10001218:	687b      	ldr	r3, [r7, #4]
1000121a:	681b      	ldr	r3, [r3, #0]
1000121c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001220:	4313      	orrs	r3, r2
10001222:	624b      	str	r3, [r1, #36]	@ 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10001224:	687b      	ldr	r3, [r7, #4]
10001226:	681b      	ldr	r3, [r3, #0]
10001228:	2b03      	cmp	r3, #3
1000122a:	d016      	beq.n	1000125a <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000122c:	f7fe ff92 	bl	10000154 <HAL_GetTick>
10001230:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001232:	e009      	b.n	10001248 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001234:	f7fe ff8e 	bl	10000154 <HAL_GetTick>
10001238:	4602      	mov	r2, r0
1000123a:	68fb      	ldr	r3, [r7, #12]
1000123c:	1ad3      	subs	r3, r2, r3
1000123e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001242:	d901      	bls.n	10001248 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10001244:	2303      	movs	r3, #3
10001246:	e040      	b.n	100012ca <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001248:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000124c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000124e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001252:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001256:	d1ed      	bne.n	10001234 <RCC_AXISSConfig+0x90>
10001258:	e015      	b.n	10001286 <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000125a:	f7fe ff7b 	bl	10000154 <HAL_GetTick>
1000125e:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001260:	e009      	b.n	10001276 <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001262:	f7fe ff77 	bl	10000154 <HAL_GetTick>
10001266:	4602      	mov	r2, r0
10001268:	68fb      	ldr	r3, [r7, #12]
1000126a:	1ad3      	subs	r3, r2, r3
1000126c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10001270:	d901      	bls.n	10001276 <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10001272:	2303      	movs	r3, #3
10001274:	e029      	b.n	100012ca <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001276:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000127a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000127c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001280:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001284:	d0ed      	beq.n	10001262 <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10001286:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000128a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000128c:	f023 0207 	bic.w	r2, r3, #7
10001290:	687b      	ldr	r3, [r7, #4]
10001292:	685b      	ldr	r3, [r3, #4]
10001294:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001298:	4313      	orrs	r3, r2
1000129a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000129c:	f7fe ff5a 	bl	10000154 <HAL_GetTick>
100012a0:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
100012a2:	e009      	b.n	100012b8 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100012a4:	f7fe ff56 	bl	10000154 <HAL_GetTick>
100012a8:	4602      	mov	r2, r0
100012aa:	68fb      	ldr	r3, [r7, #12]
100012ac:	1ad3      	subs	r3, r2, r3
100012ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100012b2:	d901      	bls.n	100012b8 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
100012b4:	2303      	movs	r3, #3
100012b6:	e008      	b.n	100012ca <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
100012b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100012be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100012c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100012c6:	d1ed      	bne.n	100012a4 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
100012c8:	2300      	movs	r3, #0
}
100012ca:	4618      	mov	r0, r3
100012cc:	3710      	adds	r7, #16
100012ce:	46bd      	mov	sp, r7
100012d0:	bd80      	pop	{r7, pc}
	...

100012d4 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
100012d4:	b580      	push	{r7, lr}
100012d6:	b084      	sub	sp, #16
100012d8:	af00      	add	r7, sp, #0
100012da:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
100012dc:	687b      	ldr	r3, [r7, #4]
100012de:	681b      	ldr	r3, [r3, #0]
100012e0:	2b03      	cmp	r3, #3
100012e2:	d834      	bhi.n	1000134e <RCC_MCUConfig+0x7a>
100012e4:	a201      	add	r2, pc, #4	@ (adr r2, 100012ec <RCC_MCUConfig+0x18>)
100012e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100012ea:	bf00      	nop
100012ec:	100012fd 	.word	0x100012fd
100012f0:	10001311 	.word	0x10001311
100012f4:	10001327 	.word	0x10001327
100012f8:	1000133b 	.word	0x1000133b
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100012fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001300:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001304:	f003 0301 	and.w	r3, r3, #1
10001308:	2b01      	cmp	r3, #1
1000130a:	d022      	beq.n	10001352 <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
1000130c:	2301      	movs	r3, #1
1000130e:	e081      	b.n	10001414 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001310:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001314:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
1000131c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001320:	d019      	beq.n	10001356 <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10001322:	2301      	movs	r3, #1
10001324:	e076      	b.n	10001414 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001326:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000132a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000132e:	f003 0310 	and.w	r3, r3, #16
10001332:	2b10      	cmp	r3, #16
10001334:	d011      	beq.n	1000135a <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10001336:	2301      	movs	r3, #1
10001338:	e06c      	b.n	10001414 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
1000133a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000133e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001342:	f003 0302 	and.w	r3, r3, #2
10001346:	2b02      	cmp	r3, #2
10001348:	d009      	beq.n	1000135e <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
1000134a:	2301      	movs	r3, #1
1000134c:	e062      	b.n	10001414 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
1000134e:	bf00      	nop
10001350:	e006      	b.n	10001360 <RCC_MCUConfig+0x8c>
      break;
10001352:	bf00      	nop
10001354:	e004      	b.n	10001360 <RCC_MCUConfig+0x8c>
      break;
10001356:	bf00      	nop
10001358:	e002      	b.n	10001360 <RCC_MCUConfig+0x8c>
      break;
1000135a:	bf00      	nop
1000135c:	e000      	b.n	10001360 <RCC_MCUConfig+0x8c>
      break;
1000135e:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10001360:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001366:	f023 0203 	bic.w	r2, r3, #3
1000136a:	687b      	ldr	r3, [r7, #4]
1000136c:	681b      	ldr	r3, [r3, #0]
1000136e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001372:	4313      	orrs	r3, r2
10001374:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001376:	f7fe feed 	bl	10000154 <HAL_GetTick>
1000137a:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
1000137c:	e009      	b.n	10001392 <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000137e:	f7fe fee9 	bl	10000154 <HAL_GetTick>
10001382:	4602      	mov	r2, r0
10001384:	68fb      	ldr	r3, [r7, #12]
10001386:	1ad3      	subs	r3, r2, r3
10001388:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000138c:	d901      	bls.n	10001392 <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
1000138e:	2303      	movs	r3, #3
10001390:	e040      	b.n	10001414 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001392:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001398:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000139c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100013a0:	d1ed      	bne.n	1000137e <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100013a2:	f000 f954 	bl	1000164e <HAL_RCC_GetSystemCoreClockFreq>
100013a6:	4603      	mov	r3, r0
100013a8:	4a1c      	ldr	r2, [pc, #112]	@ (1000141c <RCC_MCUConfig+0x148>)
100013aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
100013ac:	4b1c      	ldr	r3, [pc, #112]	@ (10001420 <RCC_MCUConfig+0x14c>)
100013ae:	681b      	ldr	r3, [r3, #0]
100013b0:	4618      	mov	r0, r3
100013b2:	f7fe fe85 	bl	100000c0 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
100013b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013ba:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
100013be:	f023 020f 	bic.w	r2, r3, #15
100013c2:	687b      	ldr	r3, [r7, #4]
100013c4:	685b      	ldr	r3, [r3, #4]
100013c6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100013ca:	4313      	orrs	r3, r2
100013cc:	f8c1 3830 	str.w	r3, [r1, #2096]	@ 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100013d0:	f7fe fec0 	bl	10000154 <HAL_GetTick>
100013d4:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
100013d6:	e009      	b.n	100013ec <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100013d8:	f7fe febc 	bl	10000154 <HAL_GetTick>
100013dc:	4602      	mov	r2, r0
100013de:	68fb      	ldr	r3, [r7, #12]
100013e0:	1ad3      	subs	r3, r2, r3
100013e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100013e6:	d901      	bls.n	100013ec <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
100013e8:	2303      	movs	r3, #3
100013ea:	e013      	b.n	10001414 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
100013ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100013f0:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
100013f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100013f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100013fc:	d1ec      	bne.n	100013d8 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100013fe:	f000 f926 	bl	1000164e <HAL_RCC_GetSystemCoreClockFreq>
10001402:	4603      	mov	r3, r0
10001404:	4a05      	ldr	r2, [pc, #20]	@ (1000141c <RCC_MCUConfig+0x148>)
10001406:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001408:	4b05      	ldr	r3, [pc, #20]	@ (10001420 <RCC_MCUConfig+0x14c>)
1000140a:	681b      	ldr	r3, [r3, #0]
1000140c:	4618      	mov	r0, r3
1000140e:	f7fe fe57 	bl	100000c0 <HAL_InitTick>
#endif

  return HAL_OK;
10001412:	2300      	movs	r3, #0
}
10001414:	4618      	mov	r0, r3
10001416:	3710      	adds	r7, #16
10001418:	46bd      	mov	sp, r7
1000141a:	bd80      	pop	{r7, pc}
1000141c:	10020000 	.word	0x10020000
10001420:	10020004 	.word	0x10020004

10001424 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10001424:	b480      	push	{r7}
10001426:	b089      	sub	sp, #36	@ 0x24
10001428:	af00      	add	r7, sp, #0
1000142a:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
1000142c:	2300      	movs	r3, #0
1000142e:	61bb      	str	r3, [r7, #24]
10001430:	2301      	movs	r3, #1
10001432:	617b      	str	r3, [r7, #20]
10001434:	2300      	movs	r3, #0
10001436:	613b      	str	r3, [r7, #16]
10001438:	2300      	movs	r3, #0
1000143a:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
1000143c:	f04f 0300 	mov.w	r3, #0
10001440:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10001442:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001446:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
1000144a:	f003 0303 	and.w	r3, r3, #3
1000144e:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10001450:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001454:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10001458:	0c1b      	lsrs	r3, r3, #16
1000145a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
1000145e:	3301      	adds	r3, #1
10001460:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10001462:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001466:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
1000146a:	0c1b      	lsrs	r3, r3, #16
1000146c:	f003 0301 	and.w	r3, r3, #1
10001470:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10001472:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001476:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
1000147a:	08db      	lsrs	r3, r3, #3
1000147c:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001480:	693a      	ldr	r2, [r7, #16]
10001482:	fb02 f303 	mul.w	r3, r2, r3
10001486:	ee07 3a90 	vmov	s15, r3
1000148a:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000148e:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10001492:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001496:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
1000149a:	f3c3 0308 	ubfx	r3, r3, #0, #9
1000149e:	3301      	adds	r3, #1
100014a0:	ee07 3a90 	vmov	s15, r3
100014a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100014a8:	edd7 6a02 	vldr	s13, [r7, #8]
100014ac:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 10001608 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
100014b0:	eec6 7a86 	vdiv.f32	s15, s13, s12
100014b4:	ee77 7a27 	vadd.f32	s15, s14, s15
100014b8:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
100014bc:	69bb      	ldr	r3, [r7, #24]
100014be:	2b03      	cmp	r3, #3
100014c0:	d85b      	bhi.n	1000157a <HAL_RCC_GetPLL3ClockFreq+0x156>
100014c2:	a201      	add	r2, pc, #4	@ (adr r2, 100014c8 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
100014c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100014c8:	100014d9 	.word	0x100014d9
100014cc:	10001537 	.word	0x10001537
100014d0:	10001555 	.word	0x10001555
100014d4:	10001573 	.word	0x10001573
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100014d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100014dc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100014e0:	f003 0304 	and.w	r3, r3, #4
100014e4:	2b04      	cmp	r3, #4
100014e6:	d117      	bne.n	10001518 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100014e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100014ec:	699b      	ldr	r3, [r3, #24]
100014ee:	f003 0303 	and.w	r3, r3, #3
100014f2:	4a46      	ldr	r2, [pc, #280]	@ (1000160c <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
100014f4:	fa22 f303 	lsr.w	r3, r2, r3
100014f8:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
100014fa:	68fa      	ldr	r2, [r7, #12]
100014fc:	697b      	ldr	r3, [r7, #20]
100014fe:	fbb2 f3f3 	udiv	r3, r2, r3
10001502:	ee07 3a90 	vmov	s15, r3
10001506:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000150a:	ed97 7a07 	vldr	s14, [r7, #28]
1000150e:	ee67 7a27 	vmul.f32	s15, s14, s15
10001512:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10001516:	e030      	b.n	1000157a <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10001518:	4a3c      	ldr	r2, [pc, #240]	@ (1000160c <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
1000151a:	697b      	ldr	r3, [r7, #20]
1000151c:	fbb2 f3f3 	udiv	r3, r2, r3
10001520:	ee07 3a90 	vmov	s15, r3
10001524:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001528:	ed97 7a07 	vldr	s14, [r7, #28]
1000152c:	ee67 7a27 	vmul.f32	s15, s14, s15
10001530:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001534:	e021      	b.n	1000157a <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10001536:	4a36      	ldr	r2, [pc, #216]	@ (10001610 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10001538:	697b      	ldr	r3, [r7, #20]
1000153a:	fbb2 f3f3 	udiv	r3, r2, r3
1000153e:	ee07 3a90 	vmov	s15, r3
10001542:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001546:	ed97 7a07 	vldr	s14, [r7, #28]
1000154a:	ee67 7a27 	vmul.f32	s15, s14, s15
1000154e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001552:	e012      	b.n	1000157a <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10001554:	4a2f      	ldr	r2, [pc, #188]	@ (10001614 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10001556:	697b      	ldr	r3, [r7, #20]
10001558:	fbb2 f3f3 	udiv	r3, r2, r3
1000155c:	ee07 3a90 	vmov	s15, r3
10001560:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001564:	ed97 7a07 	vldr	s14, [r7, #28]
10001568:	ee67 7a27 	vmul.f32	s15, s14, s15
1000156c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001570:	e003      	b.n	1000157a <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10001572:	f04f 0300 	mov.w	r3, #0
10001576:	61fb      	str	r3, [r7, #28]
      break;
10001578:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
1000157a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000157e:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10001582:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10001586:	3301      	adds	r3, #1
10001588:	ee07 3a90 	vmov	s15, r3
1000158c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001590:	edd7 6a07 	vldr	s13, [r7, #28]
10001594:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000159c:	ee17 2a90 	vmov	r2, s15
100015a0:	687b      	ldr	r3, [r7, #4]
100015a2:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
100015a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100015a8:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
100015ac:	0a1b      	lsrs	r3, r3, #8
100015ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
100015b2:	3301      	adds	r3, #1
100015b4:	ee07 3a90 	vmov	s15, r3
100015b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100015bc:	edd7 6a07 	vldr	s13, [r7, #28]
100015c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
100015c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100015c8:	ee17 2a90 	vmov	r2, s15
100015cc:	687b      	ldr	r3, [r7, #4]
100015ce:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
100015d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100015d4:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
100015d8:	0c1b      	lsrs	r3, r3, #16
100015da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
100015de:	3301      	adds	r3, #1
100015e0:	ee07 3a90 	vmov	s15, r3
100015e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100015e8:	edd7 6a07 	vldr	s13, [r7, #28]
100015ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
100015f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100015f4:	ee17 2a90 	vmov	r2, s15
100015f8:	687b      	ldr	r3, [r7, #4]
100015fa:	609a      	str	r2, [r3, #8]
}
100015fc:	bf00      	nop
100015fe:	3724      	adds	r7, #36	@ 0x24
10001600:	46bd      	mov	sp, r7
10001602:	f85d 7b04 	ldr.w	r7, [sp], #4
10001606:	4770      	bx	lr
10001608:	46000000 	.word	0x46000000
1000160c:	03d09000 	.word	0x03d09000
10001610:	016e3600 	.word	0x016e3600
10001614:	003d0900 	.word	0x003d0900

10001618 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10001618:	b580      	push	{r7, lr}
1000161a:	b082      	sub	sp, #8
1000161c:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
1000161e:	2300      	movs	r3, #0
10001620:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10001622:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001626:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
1000162a:	f003 030f 	and.w	r3, r3, #15
1000162e:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10001630:	687b      	ldr	r3, [r7, #4]
10001632:	2b09      	cmp	r3, #9
10001634:	d901      	bls.n	1000163a <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10001636:	2309      	movs	r3, #9
10001638:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
1000163a:	f000 f80f 	bl	1000165c <HAL_RCC_GetMCUSSFreq>
1000163e:	4602      	mov	r2, r0
10001640:	687b      	ldr	r3, [r7, #4]
10001642:	fa22 f303 	lsr.w	r3, r2, r3
}
10001646:	4618      	mov	r0, r3
10001648:	3708      	adds	r7, #8
1000164a:	46bd      	mov	sp, r7
1000164c:	bd80      	pop	{r7, pc}

1000164e <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
1000164e:	b580      	push	{r7, lr}
10001650:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10001652:	f7ff ffe1 	bl	10001618 <HAL_RCC_GetMCUFreq>
10001656:	4603      	mov	r3, r0
#endif
}
10001658:	4618      	mov	r0, r3
1000165a:	bd80      	pop	{r7, pc}

1000165c <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
1000165c:	b580      	push	{r7, lr}
1000165e:	b084      	sub	sp, #16
10001660:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10001662:	2300      	movs	r3, #0
10001664:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10001666:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000166a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000166c:	f003 0303 	and.w	r3, r3, #3
10001670:	2b03      	cmp	r3, #3
10001672:	d822      	bhi.n	100016ba <HAL_RCC_GetMCUSSFreq+0x5e>
10001674:	a201      	add	r2, pc, #4	@ (adr r2, 1000167c <HAL_RCC_GetMCUSSFreq+0x20>)
10001676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000167a:	bf00      	nop
1000167c:	1000169b 	.word	0x1000169b
10001680:	100016af 	.word	0x100016af
10001684:	100016b5 	.word	0x100016b5
10001688:	1000168d 	.word	0x1000168d
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000168c:	463b      	mov	r3, r7
1000168e:	4618      	mov	r0, r3
10001690:	f7ff fec8 	bl	10001424 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10001694:	683b      	ldr	r3, [r7, #0]
10001696:	60fb      	str	r3, [r7, #12]
      break;
10001698:	e00f      	b.n	100016ba <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000169a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000169e:	699b      	ldr	r3, [r3, #24]
100016a0:	f003 0303 	and.w	r3, r3, #3
100016a4:	4a07      	ldr	r2, [pc, #28]	@ (100016c4 <HAL_RCC_GetMCUSSFreq+0x68>)
100016a6:	fa22 f303 	lsr.w	r3, r2, r3
100016aa:	60fb      	str	r3, [r7, #12]

      break;
100016ac:	e005      	b.n	100016ba <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
100016ae:	4b06      	ldr	r3, [pc, #24]	@ (100016c8 <HAL_RCC_GetMCUSSFreq+0x6c>)
100016b0:	60fb      	str	r3, [r7, #12]
      break;
100016b2:	e002      	b.n	100016ba <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
100016b4:	4b05      	ldr	r3, [pc, #20]	@ (100016cc <HAL_RCC_GetMCUSSFreq+0x70>)
100016b6:	60fb      	str	r3, [r7, #12]
      break;
100016b8:	bf00      	nop
  }

  return mcussfreq;
100016ba:	68fb      	ldr	r3, [r7, #12]
}
100016bc:	4618      	mov	r0, r3
100016be:	3710      	adds	r7, #16
100016c0:	46bd      	mov	sp, r7
100016c2:	bd80      	pop	{r7, pc}
100016c4:	03d09000 	.word	0x03d09000
100016c8:	016e3600 	.word	0x016e3600
100016cc:	003d0900 	.word	0x003d0900

100016d0 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
100016d0:	b580      	push	{r7, lr}
100016d2:	b084      	sub	sp, #16
100016d4:	af00      	add	r7, sp, #0
100016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
100016d8:	687b      	ldr	r3, [r7, #4]
100016da:	681b      	ldr	r3, [r3, #0]
100016dc:	2b00      	cmp	r3, #0
100016de:	f000 8171 	beq.w	100019c4 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
100016e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100016e8:	f003 0307 	and.w	r3, r3, #7
100016ec:	2b02      	cmp	r3, #2
100016ee:	d108      	bne.n	10001702 <RCCEx_PLL2_Config+0x32>
100016f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100016f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100016fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100016fe:	f000 815f 	beq.w	100019c0 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
10001702:	687b      	ldr	r3, [r7, #4]
10001704:	681b      	ldr	r3, [r3, #0]
10001706:	2b02      	cmp	r3, #2
10001708:	f040 8130 	bne.w	1000196c <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
1000170c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001712:	f003 0303 	and.w	r3, r3, #3
10001716:	2b00      	cmp	r3, #0
10001718:	d008      	beq.n	1000172c <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
1000171a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000171e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001720:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10001724:	2b01      	cmp	r3, #1
10001726:	d001      	beq.n	1000172c <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10001728:	2301      	movs	r3, #1
1000172a:	e14c      	b.n	100019c6 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000172c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001734:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
1000173c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10001740:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001744:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001748:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000174c:	f023 0301 	bic.w	r3, r3, #1
10001750:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001754:	f7fe fcfe 	bl	10000154 <HAL_GetTick>
10001758:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000175a:	e008      	b.n	1000176e <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000175c:	f7fe fcfa 	bl	10000154 <HAL_GetTick>
10001760:	4602      	mov	r2, r0
10001762:	68fb      	ldr	r3, [r7, #12]
10001764:	1ad3      	subs	r3, r2, r3
10001766:	2b64      	cmp	r3, #100	@ 0x64
10001768:	d901      	bls.n	1000176e <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000176a:	2303      	movs	r3, #3
1000176c:	e12b      	b.n	100019c6 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000176e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001772:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001776:	f003 0302 	and.w	r3, r3, #2
1000177a:	2b02      	cmp	r3, #2
1000177c:	d0ee      	beq.n	1000175c <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
1000177e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001782:	6a1b      	ldr	r3, [r3, #32]
10001784:	f003 0303 	and.w	r3, r3, #3
10001788:	2b02      	cmp	r3, #2
1000178a:	d107      	bne.n	1000179c <RCCEx_PLL2_Config+0xcc>
1000178c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001790:	6a1b      	ldr	r3, [r3, #32]
10001792:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001796:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000179a:	d00e      	beq.n	100017ba <RCCEx_PLL2_Config+0xea>
1000179c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017a0:	6a1b      	ldr	r3, [r3, #32]
100017a2:	f003 0303 	and.w	r3, r3, #3
100017a6:	2b03      	cmp	r3, #3
100017a8:	d112      	bne.n	100017d0 <RCCEx_PLL2_Config+0x100>
100017aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017ae:	6a1b      	ldr	r3, [r3, #32]
100017b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100017b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100017b8:	d10a      	bne.n	100017d0 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
100017ba:	687b      	ldr	r3, [r7, #4]
100017bc:	685a      	ldr	r2, [r3, #4]
100017be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100017c4:	f003 0303 	and.w	r3, r3, #3
100017c8:	429a      	cmp	r2, r3
100017ca:	d00c      	beq.n	100017e6 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
100017cc:	2301      	movs	r3, #1
100017ce:	e0fa      	b.n	100019c6 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
100017d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100017d6:	f023 0203 	bic.w	r2, r3, #3
100017da:	687b      	ldr	r3, [r7, #4]
100017dc:	685b      	ldr	r3, [r3, #4]
100017de:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100017e2:	4313      	orrs	r3, r2
100017e4:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
100017e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017ea:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
100017ee:	4b78      	ldr	r3, [pc, #480]	@ (100019d0 <RCCEx_PLL2_Config+0x300>)
100017f0:	4013      	ands	r3, r2
100017f2:	687a      	ldr	r2, [r7, #4]
100017f4:	68d2      	ldr	r2, [r2, #12]
100017f6:	1e51      	subs	r1, r2, #1
100017f8:	687a      	ldr	r2, [r7, #4]
100017fa:	6892      	ldr	r2, [r2, #8]
100017fc:	3a01      	subs	r2, #1
100017fe:	0412      	lsls	r2, r2, #16
10001800:	430a      	orrs	r2, r1
10001802:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001806:	4313      	orrs	r3, r2
10001808:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
1000180c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001810:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
10001814:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10001818:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
1000181c:	687a      	ldr	r2, [r7, #4]
1000181e:	6912      	ldr	r2, [r2, #16]
10001820:	1e51      	subs	r1, r2, #1
10001822:	687a      	ldr	r2, [r7, #4]
10001824:	6952      	ldr	r2, [r2, #20]
10001826:	3a01      	subs	r2, #1
10001828:	0212      	lsls	r2, r2, #8
1000182a:	4311      	orrs	r1, r2
1000182c:	687a      	ldr	r2, [r7, #4]
1000182e:	6992      	ldr	r2, [r2, #24]
10001830:	3a01      	subs	r2, #1
10001832:	0412      	lsls	r2, r2, #16
10001834:	430a      	orrs	r2, r1
10001836:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000183a:	4313      	orrs	r3, r2
1000183c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10001840:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001844:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10001848:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000184c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10001850:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10001854:	687b      	ldr	r3, [r7, #4]
10001856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001858:	2b02      	cmp	r3, #2
1000185a:	d003      	beq.n	10001864 <RCCEx_PLL2_Config+0x194>
1000185c:	687b      	ldr	r3, [r7, #4]
1000185e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001860:	2b00      	cmp	r3, #0
10001862:	d10c      	bne.n	1000187e <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10001864:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001868:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
1000186c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001870:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10001874:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10001878:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
1000187c:	e00f      	b.n	1000189e <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
1000187e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001882:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10001886:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000188a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
1000188e:	687a      	ldr	r2, [r7, #4]
10001890:	6a12      	ldr	r2, [r2, #32]
10001892:	00d2      	lsls	r2, r2, #3
10001894:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001898:	4313      	orrs	r3, r2
1000189a:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
1000189e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
100018a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100018aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
100018ae:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100018b2:	687b      	ldr	r3, [r7, #4]
100018b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100018b6:	2b02      	cmp	r3, #2
100018b8:	d124      	bne.n	10001904 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
100018ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
100018c2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
100018c6:	687b      	ldr	r3, [r7, #4]
100018c8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
100018ca:	687b      	ldr	r3, [r7, #4]
100018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100018ce:	4319      	orrs	r1, r3
100018d0:	687b      	ldr	r3, [r7, #4]
100018d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100018d4:	4319      	orrs	r1, r3
100018d6:	687b      	ldr	r3, [r7, #4]
100018d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100018da:	4319      	orrs	r1, r3
100018dc:	687b      	ldr	r3, [r7, #4]
100018de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100018e0:	041b      	lsls	r3, r3, #16
100018e2:	430b      	orrs	r3, r1
100018e4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100018e8:	4313      	orrs	r3, r2
100018ea:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
100018ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100018f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100018fa:	f043 0304 	orr.w	r3, r3, #4
100018fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
10001902:	e009      	b.n	10001918 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10001904:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000190c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001910:	f023 0304 	bic.w	r3, r3, #4
10001914:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10001918:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000191c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001920:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001924:	f043 0301 	orr.w	r3, r3, #1
10001928:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000192c:	f7fe fc12 	bl	10000154 <HAL_GetTick>
10001930:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001932:	e008      	b.n	10001946 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001934:	f7fe fc0e 	bl	10000154 <HAL_GetTick>
10001938:	4602      	mov	r2, r0
1000193a:	68fb      	ldr	r3, [r7, #12]
1000193c:	1ad3      	subs	r3, r2, r3
1000193e:	2b64      	cmp	r3, #100	@ 0x64
10001940:	d901      	bls.n	10001946 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10001942:	2303      	movs	r3, #3
10001944:	e03f      	b.n	100019c6 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001946:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000194e:	f003 0302 	and.w	r3, r3, #2
10001952:	2b02      	cmp	r3, #2
10001954:	d1ee      	bne.n	10001934 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10001956:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000195a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000195e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001962:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10001966:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
1000196a:	e02b      	b.n	100019c4 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000196c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001970:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001974:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
1000197c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10001980:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001984:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001988:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000198c:	f023 0301 	bic.w	r3, r3, #1
10001990:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001994:	f7fe fbde 	bl	10000154 <HAL_GetTick>
10001998:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000199a:	e008      	b.n	100019ae <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000199c:	f7fe fbda 	bl	10000154 <HAL_GetTick>
100019a0:	4602      	mov	r2, r0
100019a2:	68fb      	ldr	r3, [r7, #12]
100019a4:	1ad3      	subs	r3, r2, r3
100019a6:	2b64      	cmp	r3, #100	@ 0x64
100019a8:	d901      	bls.n	100019ae <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
100019aa:	2303      	movs	r3, #3
100019ac:	e00b      	b.n	100019c6 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100019ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100019b6:	f003 0302 	and.w	r3, r3, #2
100019ba:	2b02      	cmp	r3, #2
100019bc:	d0ee      	beq.n	1000199c <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
100019be:	e001      	b.n	100019c4 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100019c0:	2301      	movs	r3, #1
100019c2:	e000      	b.n	100019c6 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
100019c4:	2300      	movs	r3, #0

}
100019c6:	4618      	mov	r0, r3
100019c8:	3710      	adds	r7, #16
100019ca:	46bd      	mov	sp, r7
100019cc:	bd80      	pop	{r7, pc}
100019ce:	bf00      	nop
100019d0:	ffc0fe00 	.word	0xffc0fe00

100019d4 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
100019d4:	b580      	push	{r7, lr}
100019d6:	b084      	sub	sp, #16
100019d8:	af00      	add	r7, sp, #0
100019da:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
100019dc:	687b      	ldr	r3, [r7, #4]
100019de:	681b      	ldr	r3, [r3, #0]
100019e0:	2b00      	cmp	r3, #0
100019e2:	f000 815a 	beq.w	10001c9a <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
100019e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100019ec:	f003 0303 	and.w	r3, r3, #3
100019f0:	2b03      	cmp	r3, #3
100019f2:	d108      	bne.n	10001a06 <RCCEx_PLL3_Config+0x32>
100019f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100019fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100019fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001a02:	f000 8148 	beq.w	10001c96 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10001a06:	687b      	ldr	r3, [r7, #4]
10001a08:	681b      	ldr	r3, [r3, #0]
10001a0a:	2b02      	cmp	r3, #2
10001a0c:	f040 8119 	bne.w	10001c42 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10001a10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a14:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001a18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10001a20:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
10001a24:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a28:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001a2c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001a30:	f023 0301 	bic.w	r3, r3, #1
10001a34:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001a38:	f7fe fb8c 	bl	10000154 <HAL_GetTick>
10001a3c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10001a3e:	e008      	b.n	10001a52 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001a40:	f7fe fb88 	bl	10000154 <HAL_GetTick>
10001a44:	4602      	mov	r2, r0
10001a46:	68fb      	ldr	r3, [r7, #12]
10001a48:	1ad3      	subs	r3, r2, r3
10001a4a:	2b64      	cmp	r3, #100	@ 0x64
10001a4c:	d901      	bls.n	10001a52 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
10001a4e:	2303      	movs	r3, #3
10001a50:	e124      	b.n	10001c9c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10001a52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a56:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001a5a:	f003 0302 	and.w	r3, r3, #2
10001a5e:	2b02      	cmp	r3, #2
10001a60:	d0ee      	beq.n	10001a40 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10001a62:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a66:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001a6a:	f023 0203 	bic.w	r2, r3, #3
10001a6e:	687b      	ldr	r3, [r7, #4]
10001a70:	685b      	ldr	r3, [r3, #4]
10001a72:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001a76:	4313      	orrs	r3, r2
10001a78:	f8c1 3820 	str.w	r3, [r1, #2080]	@ 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10001a7c:	e008      	b.n	10001a90 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001a7e:	f7fe fb69 	bl	10000154 <HAL_GetTick>
10001a82:	4602      	mov	r2, r0
10001a84:	68fb      	ldr	r3, [r7, #12]
10001a86:	1ad3      	subs	r3, r2, r3
10001a88:	2b64      	cmp	r3, #100	@ 0x64
10001a8a:	d901      	bls.n	10001a90 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10001a8c:	2303      	movs	r3, #3
10001a8e:	e105      	b.n	10001c9c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10001a90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a94:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001a98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001aa0:	d1ed      	bne.n	10001a7e <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10001aa2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001aa6:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10001aaa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
10001aae:	687b      	ldr	r3, [r7, #4]
10001ab0:	69db      	ldr	r3, [r3, #28]
10001ab2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001ab6:	4313      	orrs	r3, r2
10001ab8:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10001abc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ac0:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
10001ac4:	4b77      	ldr	r3, [pc, #476]	@ (10001ca4 <RCCEx_PLL3_Config+0x2d0>)
10001ac6:	4013      	ands	r3, r2
10001ac8:	687a      	ldr	r2, [r7, #4]
10001aca:	68d2      	ldr	r2, [r2, #12]
10001acc:	1e51      	subs	r1, r2, #1
10001ace:	687a      	ldr	r2, [r7, #4]
10001ad0:	6892      	ldr	r2, [r2, #8]
10001ad2:	3a01      	subs	r2, #1
10001ad4:	0412      	lsls	r2, r2, #16
10001ad6:	430a      	orrs	r2, r1
10001ad8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001adc:	4313      	orrs	r3, r2
10001ade:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884
10001ae2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ae6:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10001aea:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10001aee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10001af2:	687a      	ldr	r2, [r7, #4]
10001af4:	6912      	ldr	r2, [r2, #16]
10001af6:	1e51      	subs	r1, r2, #1
10001af8:	687a      	ldr	r2, [r7, #4]
10001afa:	6952      	ldr	r2, [r2, #20]
10001afc:	3a01      	subs	r2, #1
10001afe:	0212      	lsls	r2, r2, #8
10001b00:	4311      	orrs	r1, r2
10001b02:	687a      	ldr	r2, [r7, #4]
10001b04:	6992      	ldr	r2, [r2, #24]
10001b06:	3a01      	subs	r2, #1
10001b08:	0412      	lsls	r2, r2, #16
10001b0a:	430a      	orrs	r2, r1
10001b0c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001b10:	4313      	orrs	r3, r2
10001b12:	f8c1 3888 	str.w	r3, [r1, #2184]	@ 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
10001b16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b1a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10001b1e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10001b26:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
10001b2a:	687b      	ldr	r3, [r7, #4]
10001b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001b2e:	2b02      	cmp	r3, #2
10001b30:	d003      	beq.n	10001b3a <RCCEx_PLL3_Config+0x166>
10001b32:	687b      	ldr	r3, [r7, #4]
10001b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001b36:	2b00      	cmp	r3, #0
10001b38:	d10c      	bne.n	10001b54 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
10001b3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b3e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10001b42:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001b46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10001b4a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10001b4e:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
10001b52:	e00f      	b.n	10001b74 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10001b54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b58:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10001b5c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10001b60:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10001b64:	687a      	ldr	r2, [r7, #4]
10001b66:	6a12      	ldr	r2, [r2, #32]
10001b68:	00d2      	lsls	r2, r2, #3
10001b6a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001b6e:	4313      	orrs	r3, r2
10001b70:	f8c1 388c 	str.w	r3, [r1, #2188]	@ 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10001b74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b78:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10001b7c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10001b84:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10001b88:	687b      	ldr	r3, [r7, #4]
10001b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001b8c:	2b02      	cmp	r3, #2
10001b8e:	d124      	bne.n	10001bda <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10001b90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b94:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
10001b98:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10001b9c:	687b      	ldr	r3, [r7, #4]
10001b9e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10001ba0:	687b      	ldr	r3, [r7, #4]
10001ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10001ba4:	4319      	orrs	r1, r3
10001ba6:	687b      	ldr	r3, [r7, #4]
10001ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10001baa:	4319      	orrs	r1, r3
10001bac:	687b      	ldr	r3, [r7, #4]
10001bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10001bb0:	4319      	orrs	r1, r3
10001bb2:	687b      	ldr	r3, [r7, #4]
10001bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10001bb6:	041b      	lsls	r3, r3, #16
10001bb8:	430b      	orrs	r3, r1
10001bba:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001bbe:	4313      	orrs	r3, r2
10001bc0:	f8c1 3890 	str.w	r3, [r1, #2192]	@ 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10001bc4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001bc8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001bcc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001bd0:	f043 0304 	orr.w	r3, r3, #4
10001bd4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
10001bd8:	e009      	b.n	10001bee <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10001bda:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001bde:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001be2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001be6:	f023 0304 	bic.w	r3, r3, #4
10001bea:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
10001bee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001bf2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001bf6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001bfa:	f043 0301 	orr.w	r3, r3, #1
10001bfe:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001c02:	f7fe faa7 	bl	10000154 <HAL_GetTick>
10001c06:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001c08:	e008      	b.n	10001c1c <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001c0a:	f7fe faa3 	bl	10000154 <HAL_GetTick>
10001c0e:	4602      	mov	r2, r0
10001c10:	68fb      	ldr	r3, [r7, #12]
10001c12:	1ad3      	subs	r3, r2, r3
10001c14:	2b64      	cmp	r3, #100	@ 0x64
10001c16:	d901      	bls.n	10001c1c <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10001c18:	2303      	movs	r3, #3
10001c1a:	e03f      	b.n	10001c9c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001c1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c20:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001c24:	f003 0302 	and.w	r3, r3, #2
10001c28:	2b02      	cmp	r3, #2
10001c2a:	d1ee      	bne.n	10001c0a <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10001c2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c30:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001c34:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001c38:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10001c3c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10001c40:	e02b      	b.n	10001c9a <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10001c42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c46:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001c4a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10001c52:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10001c56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c5a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001c5e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001c62:	f023 0301 	bic.w	r3, r3, #1
10001c66:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001c6a:	f7fe fa73 	bl	10000154 <HAL_GetTick>
10001c6e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10001c70:	e008      	b.n	10001c84 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001c72:	f7fe fa6f 	bl	10000154 <HAL_GetTick>
10001c76:	4602      	mov	r2, r0
10001c78:	68fb      	ldr	r3, [r7, #12]
10001c7a:	1ad3      	subs	r3, r2, r3
10001c7c:	2b64      	cmp	r3, #100	@ 0x64
10001c7e:	d901      	bls.n	10001c84 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10001c80:	2303      	movs	r3, #3
10001c82:	e00b      	b.n	10001c9c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10001c84:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c88:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001c8c:	f003 0302 	and.w	r3, r3, #2
10001c90:	2b02      	cmp	r3, #2
10001c92:	d0ee      	beq.n	10001c72 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10001c94:	e001      	b.n	10001c9a <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10001c96:	2301      	movs	r3, #1
10001c98:	e000      	b.n	10001c9c <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10001c9a:	2300      	movs	r3, #0
}
10001c9c:	4618      	mov	r0, r3
10001c9e:	3710      	adds	r7, #16
10001ca0:	46bd      	mov	sp, r7
10001ca2:	bd80      	pop	{r7, pc}
10001ca4:	ffc0fe00 	.word	0xffc0fe00

10001ca8 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10001ca8:	b580      	push	{r7, lr}
10001caa:	b084      	sub	sp, #16
10001cac:	af00      	add	r7, sp, #0
10001cae:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10001cb0:	687b      	ldr	r3, [r7, #4]
10001cb2:	681b      	ldr	r3, [r3, #0]
10001cb4:	2b00      	cmp	r3, #0
10001cb6:	f000 8147 	beq.w	10001f48 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10001cba:	687b      	ldr	r3, [r7, #4]
10001cbc:	681b      	ldr	r3, [r3, #0]
10001cbe:	2b02      	cmp	r3, #2
10001cc0:	f040 8119 	bne.w	10001ef6 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10001cc4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001cc8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001ccc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001cd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10001cd4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10001cd8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001cdc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001ce0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001ce4:	f023 0301 	bic.w	r3, r3, #1
10001ce8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001cec:	f7fe fa32 	bl	10000154 <HAL_GetTick>
10001cf0:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10001cf2:	e008      	b.n	10001d06 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001cf4:	f7fe fa2e 	bl	10000154 <HAL_GetTick>
10001cf8:	4602      	mov	r2, r0
10001cfa:	68fb      	ldr	r3, [r7, #12]
10001cfc:	1ad3      	subs	r3, r2, r3
10001cfe:	2b64      	cmp	r3, #100	@ 0x64
10001d00:	d901      	bls.n	10001d06 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
10001d02:	2303      	movs	r3, #3
10001d04:	e121      	b.n	10001f4a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10001d06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d0a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001d0e:	f003 0302 	and.w	r3, r3, #2
10001d12:	2b02      	cmp	r3, #2
10001d14:	d0ee      	beq.n	10001cf4 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10001d16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d1a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10001d1e:	f023 0203 	bic.w	r2, r3, #3
10001d22:	687b      	ldr	r3, [r7, #4]
10001d24:	685b      	ldr	r3, [r3, #4]
10001d26:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001d2a:	4313      	orrs	r3, r2
10001d2c:	f8c1 3824 	str.w	r3, [r1, #2084]	@ 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10001d30:	e008      	b.n	10001d44 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001d32:	f7fe fa0f 	bl	10000154 <HAL_GetTick>
10001d36:	4602      	mov	r2, r0
10001d38:	68fb      	ldr	r3, [r7, #12]
10001d3a:	1ad3      	subs	r3, r2, r3
10001d3c:	2b64      	cmp	r3, #100	@ 0x64
10001d3e:	d901      	bls.n	10001d44 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10001d40:	2303      	movs	r3, #3
10001d42:	e102      	b.n	10001f4a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10001d44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d48:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10001d4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001d50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001d54:	d1ed      	bne.n	10001d32 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10001d56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d5a:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
10001d5e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
10001d62:	687b      	ldr	r3, [r7, #4]
10001d64:	69db      	ldr	r3, [r3, #28]
10001d66:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001d6a:	4313      	orrs	r3, r2
10001d6c:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10001d70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d74:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
10001d78:	4b76      	ldr	r3, [pc, #472]	@ (10001f54 <RCCEx_PLL4_Config+0x2ac>)
10001d7a:	4013      	ands	r3, r2
10001d7c:	687a      	ldr	r2, [r7, #4]
10001d7e:	68d2      	ldr	r2, [r2, #12]
10001d80:	1e51      	subs	r1, r2, #1
10001d82:	687a      	ldr	r2, [r7, #4]
10001d84:	6892      	ldr	r2, [r2, #8]
10001d86:	3a01      	subs	r2, #1
10001d88:	0412      	lsls	r2, r2, #16
10001d8a:	430a      	orrs	r2, r1
10001d8c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001d90:	4313      	orrs	r3, r2
10001d92:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898
10001d96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d9a:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
10001d9e:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10001da2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10001da6:	687a      	ldr	r2, [r7, #4]
10001da8:	6912      	ldr	r2, [r2, #16]
10001daa:	1e51      	subs	r1, r2, #1
10001dac:	687a      	ldr	r2, [r7, #4]
10001dae:	6952      	ldr	r2, [r2, #20]
10001db0:	3a01      	subs	r2, #1
10001db2:	0212      	lsls	r2, r2, #8
10001db4:	4311      	orrs	r1, r2
10001db6:	687a      	ldr	r2, [r7, #4]
10001db8:	6992      	ldr	r2, [r2, #24]
10001dba:	3a01      	subs	r2, #1
10001dbc:	0412      	lsls	r2, r2, #16
10001dbe:	430a      	orrs	r2, r1
10001dc0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001dc4:	4313      	orrs	r3, r2
10001dc6:	f8c1 389c 	str.w	r3, [r1, #2204]	@ 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10001dca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001dce:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10001dd2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10001dda:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10001dde:	687b      	ldr	r3, [r7, #4]
10001de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001de2:	2b02      	cmp	r3, #2
10001de4:	d003      	beq.n	10001dee <RCCEx_PLL4_Config+0x146>
10001de6:	687b      	ldr	r3, [r7, #4]
10001de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001dea:	2b00      	cmp	r3, #0
10001dec:	d10c      	bne.n	10001e08 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10001dee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001df2:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10001df6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001dfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10001dfe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10001e02:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
10001e06:	e00f      	b.n	10001e28 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10001e08:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e0c:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10001e10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10001e14:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10001e18:	687a      	ldr	r2, [r7, #4]
10001e1a:	6a12      	ldr	r2, [r2, #32]
10001e1c:	00d2      	lsls	r2, r2, #3
10001e1e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001e22:	4313      	orrs	r3, r2
10001e24:	f8c1 38a0 	str.w	r3, [r1, #2208]	@ 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10001e28:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e2c:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10001e30:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10001e38:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10001e3c:	687b      	ldr	r3, [r7, #4]
10001e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001e40:	2b02      	cmp	r3, #2
10001e42:	d124      	bne.n	10001e8e <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10001e44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e48:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	@ 0x8a4
10001e4c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10001e50:	687b      	ldr	r3, [r7, #4]
10001e52:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10001e54:	687b      	ldr	r3, [r7, #4]
10001e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10001e58:	4319      	orrs	r1, r3
10001e5a:	687b      	ldr	r3, [r7, #4]
10001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10001e5e:	4319      	orrs	r1, r3
10001e60:	687b      	ldr	r3, [r7, #4]
10001e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10001e64:	4319      	orrs	r1, r3
10001e66:	687b      	ldr	r3, [r7, #4]
10001e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10001e6a:	041b      	lsls	r3, r3, #16
10001e6c:	430b      	orrs	r3, r1
10001e6e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001e72:	4313      	orrs	r3, r2
10001e74:	f8c1 38a4 	str.w	r3, [r1, #2212]	@ 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10001e78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e7c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001e80:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001e84:	f043 0304 	orr.w	r3, r3, #4
10001e88:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10001e8c:	e009      	b.n	10001ea2 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10001e8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e92:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001e96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001e9a:	f023 0304 	bic.w	r3, r3, #4
10001e9e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10001ea2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ea6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001eaa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001eae:	f043 0301 	orr.w	r3, r3, #1
10001eb2:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001eb6:	f7fe f94d 	bl	10000154 <HAL_GetTick>
10001eba:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10001ebc:	e008      	b.n	10001ed0 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001ebe:	f7fe f949 	bl	10000154 <HAL_GetTick>
10001ec2:	4602      	mov	r2, r0
10001ec4:	68fb      	ldr	r3, [r7, #12]
10001ec6:	1ad3      	subs	r3, r2, r3
10001ec8:	2b64      	cmp	r3, #100	@ 0x64
10001eca:	d901      	bls.n	10001ed0 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10001ecc:	2303      	movs	r3, #3
10001ece:	e03c      	b.n	10001f4a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10001ed0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ed4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001ed8:	f003 0302 	and.w	r3, r3, #2
10001edc:	2b02      	cmp	r3, #2
10001ede:	d1ee      	bne.n	10001ebe <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10001ee0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ee4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001ee8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001eec:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10001ef0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10001ef4:	e028      	b.n	10001f48 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10001ef6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001efa:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001efe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10001f06:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10001f0a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f0e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001f12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001f16:	f023 0301 	bic.w	r3, r3, #1
10001f1a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001f1e:	f7fe f919 	bl	10000154 <HAL_GetTick>
10001f22:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10001f24:	e008      	b.n	10001f38 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001f26:	f7fe f915 	bl	10000154 <HAL_GetTick>
10001f2a:	4602      	mov	r2, r0
10001f2c:	68fb      	ldr	r3, [r7, #12]
10001f2e:	1ad3      	subs	r3, r2, r3
10001f30:	2b64      	cmp	r3, #100	@ 0x64
10001f32:	d901      	bls.n	10001f38 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10001f34:	2303      	movs	r3, #3
10001f36:	e008      	b.n	10001f4a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10001f38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f3c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001f40:	f003 0302 	and.w	r3, r3, #2
10001f44:	2b02      	cmp	r3, #2
10001f46:	d0ee      	beq.n	10001f26 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10001f48:	2300      	movs	r3, #0
}
10001f4a:	4618      	mov	r0, r3
10001f4c:	3710      	adds	r7, #16
10001f4e:	46bd      	mov	sp, r7
10001f50:	bd80      	pop	{r7, pc}
10001f52:	bf00      	nop
10001f54:	ffc0fe00 	.word	0xffc0fe00

10001f58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
10001f58:	b480      	push	{r7}
10001f5a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
10001f5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f60:	2204      	movs	r2, #4
10001f62:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
10001f66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f6a:	2280      	movs	r2, #128	@ 0x80
10001f6c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8

}
10001f70:	bf00      	nop
10001f72:	46bd      	mov	sp, r7
10001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
10001f78:	4770      	bx	lr
	...

10001f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10001f7c:	b580      	push	{r7, lr}
10001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10001f80:	f7fe f884 	bl	1000008c <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10001f84:	4b05      	ldr	r3, [pc, #20]	@ (10001f9c <main+0x20>)
10001f86:	681b      	ldr	r3, [r3, #0]
10001f88:	f003 0307 	and.w	r3, r3, #7
10001f8c:	2b04      	cmp	r3, #4
10001f8e:	d101      	bne.n	10001f94 <main+0x18>
  {
    /* Configure the system clock */
    SystemClock_Config();
10001f90:	f000 f806 	bl	10001fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10001f94:	f7ff ffe0 	bl	10001f58 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
10001f98:	bf00      	nop
10001f9a:	e7fd      	b.n	10001f98 <main+0x1c>
10001f9c:	50020000 	.word	0x50020000

10001fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10001fa0:	b580      	push	{r7, lr}
10001fa2:	b0d2      	sub	sp, #328	@ 0x148
10001fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10001fa6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001faa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001fae:	4618      	mov	r0, r3
10001fb0:	f44f 738a 	mov.w	r3, #276	@ 0x114
10001fb4:	461a      	mov	r2, r3
10001fb6:	2100      	movs	r1, #0
10001fb8:	f000 f97b 	bl	100022b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10001fbc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001fc0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10001fc4:	4618      	mov	r0, r3
10001fc6:	2330      	movs	r3, #48	@ 0x30
10001fc8:	461a      	mov	r2, r3
10001fca:	2100      	movs	r1, #0
10001fcc:	f000 f971 	bl	100022b2 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
10001fd0:	f7fe f9b2 	bl	10000338 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
10001fd4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001fdc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
10001fe0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001fe4:	f043 0320 	orr.w	r3, r3, #32
10001fe8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
10001fec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001ff0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001ff4:	2205      	movs	r2, #5
10001ff6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
10001ff8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001ffc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10002000:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
10002004:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10002006:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000200a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000200e:	2201      	movs	r2, #1
10002010:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
10002012:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10002016:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000201a:	2200      	movs	r2, #0
1000201c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
1000201e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10002022:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10002026:	2202      	movs	r2, #2
10002028:	661a      	str	r2, [r3, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
1000202a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000202e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10002032:	2201      	movs	r2, #1
10002034:	665a      	str	r2, [r3, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
10002036:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000203a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000203e:	2203      	movs	r2, #3
10002040:	669a      	str	r2, [r3, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
10002042:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10002046:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000204a:	2242      	movs	r2, #66	@ 0x42
1000204c:	66da      	str	r2, [r3, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
1000204e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10002052:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10002056:	2202      	movs	r2, #2
10002058:	671a      	str	r2, [r3, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
1000205a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000205e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10002062:	2201      	movs	r2, #1
10002064:	675a      	str	r2, [r3, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
10002066:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000206a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000206e:	2201      	movs	r2, #1
10002070:	679a      	str	r2, [r3, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
10002072:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10002076:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000207a:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
1000207e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
10002082:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10002086:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000208a:	2201      	movs	r2, #1
1000208c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
10002090:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10002094:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10002098:	2202      	movs	r2, #2
1000209a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
1000209e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100020a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100020a6:	2201      	movs	r2, #1
100020a8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
100020ac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100020b0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100020b4:	2202      	movs	r2, #2
100020b6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
100020ba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100020be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100020c2:	2222      	movs	r2, #34	@ 0x22
100020c4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
100020c8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100020cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100020d0:	2202      	movs	r2, #2
100020d2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
100020d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100020da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100020de:	2211      	movs	r2, #17
100020e0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
100020e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100020e8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100020ec:	2225      	movs	r2, #37	@ 0x25
100020ee:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
100020f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100020f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100020fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
100020fe:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 6660;
10002102:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10002106:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000210a:	f641 2204 	movw	r2, #6660	@ 0x1a04
1000210e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
10002112:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10002116:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000211a:	2201      	movs	r2, #1
1000211c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
10002120:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10002124:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10002128:	2200      	movs	r2, #0
1000212a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
1000212e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
10002132:	4618      	mov	r0, r3
10002134:	f7fe f910 	bl	10000358 <HAL_RCC_OscConfig>
10002138:	4603      	mov	r3, r0
1000213a:	2b00      	cmp	r3, #0
1000213c:	d001      	beq.n	10002142 <SystemClock_Config+0x1a2>
  {
    Error_Handler();
1000213e:	f000 f854 	bl	100021ea <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10002142:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10002146:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000214a:	22fe      	movs	r2, #254	@ 0xfe
1000214c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
1000214e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10002152:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10002156:	2202      	movs	r2, #2
10002158:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
1000215a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000215e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10002162:	2200      	movs	r2, #0
10002164:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
10002166:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000216a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000216e:	2203      	movs	r2, #3
10002170:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10002172:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10002176:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000217a:	2200      	movs	r2, #0
1000217c:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
1000217e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10002182:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10002186:	2201      	movs	r2, #1
10002188:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
1000218a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000218e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10002192:	2202      	movs	r2, #2
10002194:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
10002196:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000219a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000219e:	2201      	movs	r2, #1
100021a0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
100021a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100021a6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100021aa:	2201      	movs	r2, #1
100021ac:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
100021ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100021b2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100021b6:	2201      	movs	r2, #1
100021b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
100021ba:	1d3b      	adds	r3, r7, #4
100021bc:	4618      	mov	r0, r3
100021be:	f7fe fe69 	bl	10000e94 <HAL_RCC_ClockConfig>
100021c2:	4603      	mov	r3, r0
100021c4:	2b00      	cmp	r3, #0
100021c6:	d001      	beq.n	100021cc <SystemClock_Config+0x22c>
  {
    Error_Handler();
100021c8:	f000 f80f 	bl	100021ea <Error_Handler>
  }

  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
100021cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100021d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
100021d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100021da:	f043 0317 	orr.w	r3, r3, #23
100021de:	6453      	str	r3, [r2, #68]	@ 0x44
}
100021e0:	bf00      	nop
100021e2:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
100021e6:	46bd      	mov	sp, r7
100021e8:	bd80      	pop	{r7, pc}

100021ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100021ea:	b480      	push	{r7}
100021ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100021ee:	b672      	cpsid	i
}
100021f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
100021f2:	bf00      	nop
100021f4:	e7fd      	b.n	100021f2 <Error_Handler+0x8>

100021f6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100021f6:	b580      	push	{r7, lr}
100021f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
100021fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
10002202:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
10002206:	2200      	movs	r2, #0
10002208:	2101      	movs	r1, #1
1000220a:	f06f 000b 	mvn.w	r0, #11
1000220e:	f7fe f86a 	bl	100002e6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
10002212:	2200      	movs	r2, #0
10002214:	2101      	movs	r1, #1
10002216:	f06f 000a 	mvn.w	r0, #10
1000221a:	f7fe f864 	bl	100002e6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
1000221e:	2200      	movs	r2, #0
10002220:	2101      	movs	r1, #1
10002222:	f06f 0009 	mvn.w	r0, #9
10002226:	f7fe f85e 	bl	100002e6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
1000222a:	2200      	movs	r2, #0
1000222c:	2101      	movs	r1, #1
1000222e:	f06f 0004 	mvn.w	r0, #4
10002232:	f7fe f858 	bl	100002e6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
10002236:	2200      	movs	r2, #0
10002238:	2101      	movs	r1, #1
1000223a:	f06f 0003 	mvn.w	r0, #3
1000223e:	f7fe f852 	bl	100002e6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
10002242:	2200      	movs	r2, #0
10002244:	2101      	movs	r1, #1
10002246:	f06f 0001 	mvn.w	r0, #1
1000224a:	f7fe f84c 	bl	100002e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
1000224e:	bf00      	nop
10002250:	bd80      	pop	{r7, pc}

10002252 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10002252:	b480      	push	{r7}
10002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
10002256:	bf00      	nop
10002258:	e7fd      	b.n	10002256 <NMI_Handler+0x4>

1000225a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
1000225a:	b480      	push	{r7}
1000225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
1000225e:	bf00      	nop
10002260:	e7fd      	b.n	1000225e <HardFault_Handler+0x4>

10002262 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
10002262:	b480      	push	{r7}
10002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10002266:	bf00      	nop
10002268:	e7fd      	b.n	10002266 <MemManage_Handler+0x4>

1000226a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
1000226a:	b480      	push	{r7}
1000226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
1000226e:	bf00      	nop
10002270:	e7fd      	b.n	1000226e <BusFault_Handler+0x4>

10002272 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
10002272:	b480      	push	{r7}
10002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10002276:	bf00      	nop
10002278:	e7fd      	b.n	10002276 <UsageFault_Handler+0x4>

1000227a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
1000227a:	b480      	push	{r7}
1000227c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
1000227e:	bf00      	nop
10002280:	46bd      	mov	sp, r7
10002282:	f85d 7b04 	ldr.w	r7, [sp], #4
10002286:	4770      	bx	lr

10002288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10002288:	b480      	push	{r7}
1000228a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
1000228c:	bf00      	nop
1000228e:	46bd      	mov	sp, r7
10002290:	f85d 7b04 	ldr.w	r7, [sp], #4
10002294:	4770      	bx	lr

10002296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10002296:	b480      	push	{r7}
10002298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
1000229a:	bf00      	nop
1000229c:	46bd      	mov	sp, r7
1000229e:	f85d 7b04 	ldr.w	r7, [sp], #4
100022a2:	4770      	bx	lr

100022a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
100022a4:	b580      	push	{r7, lr}
100022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
100022a8:	f7fd ff40 	bl	1000012c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
100022ac:	bf00      	nop
100022ae:	bd80      	pop	{r7, pc}

100022b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
100022b0:	e7fe      	b.n	100022b0 <ADC1_IRQHandler>

100022b2 <memset>:
100022b2:	4402      	add	r2, r0
100022b4:	4603      	mov	r3, r0
100022b6:	4293      	cmp	r3, r2
100022b8:	d100      	bne.n	100022bc <memset+0xa>
100022ba:	4770      	bx	lr
100022bc:	f803 1b01 	strb.w	r1, [r3], #1
100022c0:	e7f9      	b.n	100022b6 <memset+0x4>
	...

100022c4 <__libc_init_array>:
100022c4:	b570      	push	{r4, r5, r6, lr}
100022c6:	4d0d      	ldr	r5, [pc, #52]	@ (100022fc <__libc_init_array+0x38>)
100022c8:	4c0d      	ldr	r4, [pc, #52]	@ (10002300 <__libc_init_array+0x3c>)
100022ca:	1b64      	subs	r4, r4, r5
100022cc:	10a4      	asrs	r4, r4, #2
100022ce:	2600      	movs	r6, #0
100022d0:	42a6      	cmp	r6, r4
100022d2:	d109      	bne.n	100022e8 <__libc_init_array+0x24>
100022d4:	4d0b      	ldr	r5, [pc, #44]	@ (10002304 <__libc_init_array+0x40>)
100022d6:	4c0c      	ldr	r4, [pc, #48]	@ (10002308 <__libc_init_array+0x44>)
100022d8:	f000 f818 	bl	1000230c <_init>
100022dc:	1b64      	subs	r4, r4, r5
100022de:	10a4      	asrs	r4, r4, #2
100022e0:	2600      	movs	r6, #0
100022e2:	42a6      	cmp	r6, r4
100022e4:	d105      	bne.n	100022f2 <__libc_init_array+0x2e>
100022e6:	bd70      	pop	{r4, r5, r6, pc}
100022e8:	f855 3b04 	ldr.w	r3, [r5], #4
100022ec:	4798      	blx	r3
100022ee:	3601      	adds	r6, #1
100022f0:	e7ee      	b.n	100022d0 <__libc_init_array+0xc>
100022f2:	f855 3b04 	ldr.w	r3, [r5], #4
100022f6:	4798      	blx	r3
100022f8:	3601      	adds	r6, #1
100022fa:	e7f2      	b.n	100022e2 <__libc_init_array+0x1e>
100022fc:	10002374 	.word	0x10002374
10002300:	10002374 	.word	0x10002374
10002304:	10002374 	.word	0x10002374
10002308:	10002378 	.word	0x10002378

1000230c <_init>:
1000230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000230e:	bf00      	nop
10002310:	bcf8      	pop	{r3, r4, r5, r6, r7}
10002312:	bc08      	pop	{r3}
10002314:	469e      	mov	lr, r3
10002316:	4770      	bx	lr

10002318 <_fini>:
10002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000231a:	bf00      	nop
1000231c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000231e:	bc08      	pop	{r3}
10002320:	469e      	mov	lr, r3
10002322:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10002324 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10002324:	f8df d034 	ldr.w	sp, [pc, #52]	@ 1000235c <LoopForever+0x2>
  movs  r1, #0
10002328:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1000232a:	e003      	b.n	10002334 <LoopCopyDataInit>

1000232c <CopyDataInit>:
  ldr  r3, =_sidata
1000232c:	4b0c      	ldr	r3, [pc, #48]	@ (10002360 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1000232e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10002330:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10002332:	3104      	adds	r1, #4

10002334 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10002334:	480b      	ldr	r0, [pc, #44]	@ (10002364 <LoopForever+0xa>)
  ldr  r3, =_edata
10002336:	4b0c      	ldr	r3, [pc, #48]	@ (10002368 <LoopForever+0xe>)
  adds  r2, r0, r1
10002338:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1000233a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1000233c:	d3f6      	bcc.n	1000232c <CopyDataInit>
  ldr  r2, =_sbss
1000233e:	4a0b      	ldr	r2, [pc, #44]	@ (1000236c <LoopForever+0x12>)
  b  LoopFillZerobss
10002340:	e002      	b.n	10002348 <LoopFillZerobss>

10002342 <FillZerobss>:
  movs  r3, #0
10002342:	2300      	movs	r3, #0
  str  r3, [r2], #4
10002344:	f842 3b04 	str.w	r3, [r2], #4

10002348 <LoopFillZerobss>:
  ldr  r3, = _ebss
10002348:	4b09      	ldr	r3, [pc, #36]	@ (10002370 <LoopForever+0x16>)
  cmp  r2, r3
1000234a:	429a      	cmp	r2, r3
  bcc  FillZerobss
1000234c:	d3f9      	bcc.n	10002342 <FillZerobss>
  bl  SystemInit
1000234e:	f7fd fe77 	bl	10000040 <SystemInit>
 bl __libc_init_array
10002352:	f7ff ffb7 	bl	100022c4 <__libc_init_array>
  bl main
10002356:	f7ff fe11 	bl	10001f7c <main>

1000235a <LoopForever>:
    b LoopForever
1000235a:	e7fe      	b.n	1000235a <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
1000235c:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10002360:	1000237c 	.word	0x1000237c
  ldr  r0, =_sdata
10002364:	10020000 	.word	0x10020000
  ldr  r3, =_edata
10002368:	1002000c 	.word	0x1002000c
  ldr  r2, =_sbss
1000236c:	1002000c 	.word	0x1002000c
  ldr  r3, = _ebss
10002370:	1002002c 	.word	0x1002002c
