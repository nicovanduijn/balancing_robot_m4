#!/usr/bin/env bash

# Function to detect if running in WSL
is_wsl() {
    if grep -qEi "(microsoft|wsl)" /proc/version &>/dev/null; then
        return 0 
    else
        return 1  
    fi
}

# Locate STM32CubeIDE installation and tools
locate_cubeide_native() {
    if command -v stm32cubeide &>/dev/null; then
        echo $(dirname $(readlink -f $(which stm32cubeide)))
    elif [[ -d "/opt/st" ]]; then
        find /opt/st -maxdepth 1 -name "stm32cubeide_*" -type d | head -n 1
    else
        echo ""
    fi
}

# Function to find CubeIDE in WSL by checking known Windows installation paths
locate_cubeide_wsl() {
    local possible_dirs=(
        "/mnt/c/Program Files/STMicroelectronics"
        "/mnt/c/ST"
        "/mnt/c/Program Files (x86)/STMicroelectronics"
    )

    for dir in "${possible_dirs[@]}"; do
        if [[ -d "$dir" ]]; then
            # Look for CubeIDE in the directories, support multiple versions
            found_dir=$(find "$dir" -type d -name "STM32CubeIDE*" 2>/dev/null | head -n 1)
            if [[ -n "$found_dir" ]]; then
                echo "$found_dir"
                return
            fi
        fi
    done

    echo ""  # If not found
}

if is_wsl; then
    # Running in WSL, search for CubeIDE installation on the Windows side
    base_dir=$(locate_cubeide_wsl)
    if [[ -z "$base_dir" ]]; then
        echo "STM32CubeIDE not found in expected Windows directories."
        exit 1
    fi

    openocd_path=$(find "$base_dir" -name openocd.exe -path "*/tools/bin/openocd.exe" 2>/dev/null | head -n 1)
    gdb_path=$(find "$base_dir" -name arm-none-eabi-gdb.exe -path "*/tools/bin/arm-none-eabi-gdb.exe" 2>/dev/null | head -n 1)
else
    # Running on native Linux, find CubeIDE installation
    base_dir=$(locate_cubeide_native)
    if [[ -z "$base_dir" ]]; then
        echo "STM32CubeIDE not found in PATH or /opt/st."
        exit 1
    fi

    openocd_path=$(find "$base_dir" -name openocd -path "*/tools/bin/openocd" 2>/dev/null | head -n 1)
    gdb_path=$(find "$base_dir" -name arm-none-eabi-gdb -path "*/tools/bin/arm-none-eabi-gdb" 2>/dev/null | head -n 1)
fi

if [[ -z "$openocd_path" || -z "$gdb_path" ]]; then
    echo "Unable to locate OpenOCD or GDB within STM32CubeIDE installation."
    exit 1
fi


mkdir -p .vscode

# Write launch.json
cat > .vscode/launch.json <<EOL
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Attach to STM32MP1",
            "type": "cortex-debug",
            "cwd": "\${workspaceRoot}",
            "executable": "\${workspaceRoot}/build/stm32mp1/common/main.elf",
            "request": "attach",
            "servertype": "external",
            "gdbPath": "$gdb_path",
            "device": "STM32MP157CAA",
            "gdbTarget": "localhost:3333",
            "svdFile": "\${workspaceRoot}/platform/stm32mp1/STM32MP157x.svd",
            "preLaunchTask": "Start OpenOCD"
        },
        {
            "name": "Debug Simulation",
            "type": "cppdbg",
            "cwd": "\${workspaceRoot}",
            "program": "\${workspaceRoot}/build/posix/common/main",
            "request": "launch",
            "preLaunchTask": "Build simulation"
        }
    ]
}
EOL

# Write tasks.json
cat > .vscode/tasks.json <<EOL
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Build simulation",
            "type": "shell",
            "command": "make",
            "args": ["posix"]
        },
        {
            "label": "Build stm32mp1",
            "type": "shell",
            "command": "make",
            "args": ["stm32mp1"]
        },
        {
            "label": "Flash stm32mp1",
            "type": "shell",
            "command": "make",
            "args": ["flash"],
            "dependsOn": "Build stm32mp1"
        },
        {
            "label": "Start OpenOCD",
            "dependsOn": "Flash stm32mp1",
            "type": "shell",
            "command": "$openocd_path",
            "args": [
                "-f", "\${workspaceFolder}/platform/stm32mp1/openocd/balancing_robot_openocd.cfg",
                "-s", "\${workspaceFolder}/platform/stm32mp1/openocd/",
                "-c", "gdb_report_data_abort enable"
            ],
            "isBackground": true,
            "problemMatcher": {
                "pattern": {
                    "regexp": "."
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": ".*",
                    "endsPattern": "Listening on port 3333"
                }
            }
        }
    ]
}
EOL

# Update settings.json to allow UNC hosts (if running in WSL)
if is_wsl; then
    wsl_config_file="$HOME/.vscode/settings.json"

    # Ensure the settings.json exists
    mkdir -p "$(dirname "$wsl_config_file")"

    # Append the necessary setting for UNC hosts
    cat >> "$wsl_config_file" <<EOL
{
    "security.allowedUNCHosts": [
        "wsl.localhost"
    ]
}
EOL
fi

cat > .vscode/c_cpp_properties.json <<EOL
{
    "configurations": [
        {
            "name": "STM32",
            "compileCommands": "build/stm32mp1/compile_commands.json",
            "compilerPath": "/usr/bin/arm-none-eabi-g++",
            "cStandard": "c99",
            "cppStandard": "c++17"
        },
        {
            "name": "Native",
            "compileCommands": "build/posix/compile_commands.json",
            "compilerPath": "/usr/bin/g++",
            "cStandard": "c99",
            "cppStandard": "c++17"
        }
    ],
    "version": 4
}
EOL

echo "VSCode configuration files generated successfully in .vscode/ and settings updated."
