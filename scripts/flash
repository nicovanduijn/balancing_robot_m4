#!/usr/bin/env bash

set -e  # Exit immediately on error
set -u  # Treat unset variables as errors

REMOTE_HOST="root@192.168.7.1"
REMOTE_PROC="/sys/class/remoteproc/remoteproc0"
REMOTE_PATH="/lib/firmware"
FIRMWARE_FILE="main.elf"
ELF_PATH="build/stm32mp1/common/${FIRMWARE_FILE}"

# Function to check the remote processor state
check_remote_state() {
    ssh "${REMOTE_HOST}" "cat ${REMOTE_PROC}/state"
}

# Ensure the remote processor is offline
ensure_offline_state() {
    local current_state
    echo "Stopping remote processor..."
    while true; do
        current_state=$(check_remote_state)
        echo "Current state: ${current_state}"
        if [[ "${current_state}" == "offline" ]]; then
            echo "Remote processor is now offline."
            break
        fi
        ssh "${REMOTE_HOST}" "echo stop > ${REMOTE_PROC}/state"
        sleep 1
    done
}

# Main flashing process
echo "Starting firmware flashing process..."

# Ensure processor is offline
ensure_offline_state

# Copy firmware to the remote device
echo "Copying ELF file to remote device..."
scp "${ELF_PATH}" "${REMOTE_HOST}:${REMOTE_PATH}"

# Set firmware for the remote processor
echo "Setting firmware..."
ssh "${REMOTE_HOST}" "echo ${FIRMWARE_FILE} > ${REMOTE_PROC}/firmware"

# Start the remote processor
echo "Starting remote processor..."
ssh "${REMOTE_HOST}" "echo start > ${REMOTE_PROC}/state"

echo "Firmware flashed successfully."
