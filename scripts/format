#!/usr/bin/env bash

usage() {
    echo "Convenience script to format all relevant C and C++ files \r\n"
    echo "usage: ./script/format [-c] [path_of_file]\r\n"
    echo "       -c: check the formatting only, make no changes to the file tree\r\n"
    echo "        path_of_file: if no path is given, all relevant files are formatted/checked\r\n"
}

# If "-c" was given, check formatting only, no in-place adjustments
if [[ "$1" == "-c" ]]; then
    check_only=1
    shift
else
    check_only=0
fi

if [[  $# -eq 0 ]]; then
    # Generate a list of all files
    files=$(find . -type f \( -name "*.cpp" -o -name "*.c" -o -name "*.h" -o -name "*.hpp" \))
else
    # A single file was passed as an argument
    if [[ "$1" == *".cpp" || "$1" == *".c" || "$1" == *".h" || "$1" == *".hpp" ]]; then
        files=$1
    fi
fi

IFS=$'\n'
list_of_files=( $files )

# Get the list of git submodules and store them in an array
submodules=($(git submodule status --recursive | awk '{print $2}'))

# Manually excluded directories
manual_excludes=("platform/stm32mp1/generated" "build/")

# Function to check if a path is in the exclusion list
is_excluded() {
    local path="$1"
    for exclude in "${manual_excludes[@]}" "${submodules[@]}"; do
        if [[ "$path" == *"$exclude"* ]]; then
            return 0 # Path is in the exclusion list
        fi
    done
    return 1 # Path is not in the exclusion list
}

# Function to check if a file needs to be formatted
needs_formatting() {
    return $(clang-format "$1" --output-replacements-xml | grep -q "<replacement ")
}

# Iterate over the files
retval=0
for file in "${list_of_files[@]}"; do
    if ! is_excluded "$file" && needs_formatting "$file"; then
        retval=1
        if [ $check_only -eq 0 ]; then
            clang-format -i "$file"
            echo "Formatted $file"
        else
            echo "$file needs formatting!"
        fi
    fi
done

exit $retval